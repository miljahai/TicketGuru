{"ast":null,"code":"import _toConsumableArray from \"C:/Users/sirvi/Documents/IT-tradenomikoulutus/OhjelmistoProjektiI/TicketGuru/ticketguruclient/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nexport var getDateSectionConfigFromFormatToken = function getDateSectionConfigFromFormatToken(utils, formatToken) {\n  var config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([\"MUI: The token \\\"\".concat(formatToken, \"\\\" is not supported by the Date and Time Pickers.\"), 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit'\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType\n  };\n};\nvar getDeltaFromKeyCode = function getDeltaFromKeyCode(keyCode) {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport var getDaysInWeekStr = function getDaysInWeekStr(utils, format) {\n  var elements = [];\n  var now = utils.date();\n  var startDate = utils.startOfWeek(now);\n  var endDate = utils.endOfWeek(now);\n  var current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(function (weekDay) {\n    return utils.formatByString(weekDay, format);\n  });\n};\nexport var getLetterEditingOptions = function getLetterEditingOptions(utils, sectionType, format) {\n  switch (sectionType) {\n    case 'month':\n      {\n        return utils.getMonthArray(utils.date()).map(function (month) {\n          return utils.formatByString(month, format);\n        });\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, format);\n      }\n    case 'meridiem':\n      {\n        var now = utils.date();\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(function (date) {\n          return utils.formatByString(date, format);\n        });\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport var cleanDigitSectionValue = function cleanDigitSectionValue(utils, value, sectionType, format, hasLeadingZeros, sectionBoundaries) {\n  var hasLetter = function hasLetter() {\n    var startOfYear = utils.startOfYear(utils.date());\n    var startOfYearStr = utils.formatByString(startOfYear, format);\n    return Number.isNaN(Number(startOfYearStr));\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    if (sectionType !== 'day' && hasLetter()) {\n      throw new Error([\"MUI: The token \\\"\".concat(format, \"\\\" is a digit format with letter in it.'\\n             This type of format is only supported for 'day' sections\")].join('\\n'));\n    }\n  }\n  if (sectionType === 'day' && hasLetter()) {\n    var date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  var valueStr = value.toString();\n  if (hasLeadingZeros) {\n    var size = utils.formatByString(utils.date(), format).length;\n    var cleanValueStr = valueStr;\n\n    // Remove the leading zeros\n    cleanValueStr = Number(cleanValueStr).toString();\n\n    // Add enough leading zeros to fill the section\n    while (cleanValueStr.length < size) {\n      cleanValueStr = \"0\".concat(cleanValueStr);\n    }\n    return cleanValueStr;\n  }\n  return valueStr;\n};\nexport var adjustSectionValue = function adjustSectionValue(utils, section, keyCode, sectionsValueBoundaries, activeDate) {\n  var delta = getDeltaFromKeyCode(keyCode);\n  var isStart = keyCode === 'Home';\n  var isEnd = keyCode === 'End';\n  var shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  var adjustDigitSection = function adjustDigitSection() {\n    var sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    var getCleanValue = function getCleanValue(value) {\n      return cleanDigitSectionValue(utils, value, section.type, section.format, section.hasLeadingZeros, sectionBoundaries);\n    };\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.date(), section.format);\n      }\n      if (delta > 0 || isStart) {\n        return getCleanValue(sectionBoundaries.minimum);\n      }\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    var currentSectionValue = parseInt(section.value, 10);\n    var newSectionValueNumber = currentSectionValue + delta;\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum);\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  var adjustLetterSection = function adjustLetterSection() {\n    var options = getLetterEditingOptions(utils, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    var currentOptionIndex = options.indexOf(section.value);\n    var newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nvar getSectionVisibleValue = function getSectionVisibleValue(section, willBeRenderedInInput) {\n  var value = section.value || section.placeholder;\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  // Adding the ltr mark is not a problem because it's only for digit (which are always ltr)\n  // The \\u2068 and \\u2069 are cleaned, but not the \\u200e to notice that an update with same digit occurs\n  if (willBeRenderedInInput && section.contentType === 'digit' && !section.hasLeadingZeros && value.length === 1) {\n    return \"\\u2068\".concat(value, \"\\u200E\\u2069\");\n  }\n  if (willBeRenderedInInput) {\n    return \"\\u2068\".concat(value, \"\\u2069\");\n  }\n  return value;\n};\nexport var cleanString = function cleanString(dirtyString) {\n  return dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\n};\nexport var addPositionPropertiesToSections = function addPositionPropertiesToSections(sections) {\n  var position = 0;\n  var positionInInput = 1;\n  var newSections = [];\n  for (var i = 0; i < sections.length; i += 1) {\n    var section = sections[i];\n    var renderedValue = getSectionVisibleValue(section, true);\n    var sectionStr = \"\".concat(section.startSeparator).concat(renderedValue).concat(section.endSeparator);\n    var sectionLength = cleanString(sectionStr).length;\n    var sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    var cleanedValue = cleanString(renderedValue);\n    var startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    var endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput: startInInput,\n      endInInput: endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nvar getSectionPlaceholder = function getSectionPlaceholder(utils, localeText, sectionConfig, currentTokenValue) {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.date(), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport var changeSectionValueFormat = function changeSectionValueFormat(utils, valueStr, currentFormat, newFormat) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nvar isFourDigitYearFormat = function isFourDigitYearFormat(utils, format) {\n  return utils.formatByString(utils.date(), format).length === 4;\n};\nexport var doesSectionHaveLeadingZeros = function doesSectionHaveLeadingZeros(utils, contentType, sectionType, format) {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, format)) {\n          var formatted0001 = utils.formatByString(utils.setYear(utils.date(), 1), format);\n          return formatted0001 === '0001';\n        }\n        var formatted2001 = utils.formatByString(utils.setYear(utils.date(), 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(utils.date()), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(utils.date()), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(utils.date()), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(utils.date(), 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nvar getEscapedPartsFromFormat = function getEscapedPartsFromFormat(utils, format) {\n  var escapedParts = [];\n  var _utils$escapedCharact = utils.escapedCharacters,\n    startChar = _utils$escapedCharact.start,\n    endChar = _utils$escapedCharact.end;\n  var regExp = new RegExp(\"(\\\\\".concat(startChar, \"[^\\\\\").concat(endChar, \"]*\\\\\").concat(endChar, \")+\"), 'g');\n  var match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport var splitFormatIntoSections = function splitFormatIntoSections(utils, localeText, format, date) {\n  var startSeparator = '';\n  var sections = [];\n  var commitToken = function commitToken(token) {\n    if (token === '') {\n      return null;\n    }\n    var expandedToken = utils.expandFormat(token);\n    if (expandedToken !== token) {\n      return expandedToken;\n    }\n    var sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    var sectionValue = date == null || !utils.isValid(date) ? '' : utils.formatByString(date, token);\n    var hasLeadingZeros = doesSectionHaveLeadingZeros(utils, sectionConfig.contentType, sectionConfig.type, token);\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, localeText, sectionConfig, token),\n      hasLeadingZeros: hasLeadingZeros,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n  var splitFormat = function splitFormat(token) {\n    var escapedParts = getEscapedPartsFromFormat(utils, token);\n    var currentTokenValue = '';\n    var _loop = function _loop(i) {\n      var escapedPartOfCurrentChar = escapedParts.find(function (escapeIndex) {\n        return escapeIndex.start <= i && escapeIndex.end >= i;\n      });\n      var char = token[i];\n      var isEscapedChar = escapedPartOfCurrentChar != null;\n      if (!isEscapedChar && char.match(/([A-Za-z]+)/)) {\n        currentTokenValue += char;\n      } else {\n        // If we are on the opening or closing character of an escaped part of the format,\n        // Then we ignore this character.\n        var isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;\n        if (!isEscapeBoundary) {\n          var _expandedToken = commitToken(currentTokenValue);\n          if (_expandedToken != null) {\n            splitFormat(_expandedToken);\n          }\n          currentTokenValue = '';\n          if (sections.length === 0) {\n            startSeparator += char;\n          } else {\n            sections[sections.length - 1].endSeparator += char;\n          }\n        }\n      }\n    };\n    for (var i = 0; i < token.length; i += 1) {\n      _loop(i);\n    }\n    var expandedToken = commitToken(currentTokenValue);\n    if (expandedToken != null) {\n      splitFormat(expandedToken);\n    }\n  };\n  splitFormat(format);\n  return sections.map(function (section) {\n    var cleanSeparator = function cleanSeparator(separator) {\n      var cleanedSeparator = separator;\n      if (cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = \"\\u2069\".concat(cleanedSeparator, \"\\u2066\");\n      }\n      if (cleanedSeparator === '/') {\n        cleanedSeparator = ' / ';\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport var getDateFromDateSections = function getDateFromDateSections(utils, sections) {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  var shouldSkipWeekDays = sections.some(function (section) {\n    return section.type === 'day';\n  });\n  var sectionFormats = [];\n  var sectionValues = [];\n  for (var i = 0; i < sections.length; i += 1) {\n    var section = sections[i];\n    var shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, false));\n    }\n  }\n  var formatWithoutSeparator = sectionFormats.join(' ');\n  var dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport var createDateStrForInputFromSections = function createDateStrForInputFromSections(sections) {\n  var formattedArray = sections.map(function (section) {\n    return \"\".concat(section.startSeparator).concat(getSectionVisibleValue(section, true)).concat(section.endSeparator);\n  });\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return \"\\u2066\".concat(formattedArray.join(''), \"\\u2069\");\n};\nexport var getSectionsBoundaries = function getSectionsBoundaries(utils) {\n  var today = utils.date();\n  var endOfYear = utils.endOfYear(today);\n  var _utils$getMonthArray$ = utils.getMonthArray(today).reduce(function (acc, month) {\n      var daysInMonth = utils.getDaysInMonth(month);\n      if (daysInMonth > acc.maxDaysInMonth) {\n        return {\n          maxDaysInMonth: daysInMonth,\n          longestMonth: month\n        };\n      }\n      return acc;\n    }, {\n      maxDaysInMonth: 0,\n      longestMonth: null\n    }),\n    maxDaysInMonth = _utils$getMonthArray$.maxDaysInMonth,\n    longestMonth = _utils$getMonthArray$.longestMonth;\n  return {\n    year: function year(_ref) {\n      var format = _ref.format;\n      return {\n        minimum: 0,\n        maximum: isFourDigitYearFormat(utils, format) ? 9999 : 99\n      };\n    },\n    month: function month() {\n      return {\n        minimum: 1,\n        // Assumption: All years have the same amount of months\n        maximum: utils.getMonth(endOfYear) + 1\n      };\n    },\n    day: function day(_ref2) {\n      var currentDate = _ref2.currentDate;\n      return {\n        minimum: 1,\n        maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n        longestMonth: longestMonth\n      };\n    },\n    weekDay: function weekDay(_ref3) {\n      var format = _ref3.format,\n        contentType = _ref3.contentType;\n      if (contentType === 'digit') {\n        var daysInWeek = getDaysInWeekStr(utils, format).map(Number);\n        return {\n          minimum: Math.min.apply(Math, _toConsumableArray(daysInWeek)),\n          maximum: Math.max.apply(Math, _toConsumableArray(daysInWeek))\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: function hours(_ref4) {\n      var format = _ref4.format;\n      var lastHourInDay = utils.getHours(endOfYear);\n      var hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: function minutes() {\n      return {\n        minimum: 0,\n        // Assumption: All years have the same amount of minutes\n        maximum: utils.getMinutes(endOfYear)\n      };\n    },\n    seconds: function seconds() {\n      return {\n        minimum: 0,\n        // Assumption: All years have the same amount of seconds\n        maximum: utils.getSeconds(endOfYear)\n      };\n    },\n    meridiem: function meridiem() {\n      return {\n        minimum: 0,\n        maximum: 0\n      };\n    }\n  };\n};\nvar warnedOnceInvalidSection = false;\nexport var validateSections = function validateSections(sections, valueType) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      var supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      var invalidSection = sections.find(function (section) {\n        return !supportedSections.includes(section.type);\n      });\n      if (invalidSection) {\n        console.warn(\"MUI: The field component you are using is not compatible with the \\\"\".concat(invalidSection.type, \" date section.\"), \"The supported date sections are [\\\"\".concat(supportedSections.join('\", \"'), \"\\\"]`.\"));\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nvar transferDateSectionValue = function transferDateSectionValue(utils, section, dateToTransferFrom, dateToTransferTo) {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        var formattedDaysInWeek = getDaysInWeekStr(utils, section.format);\n        var dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        var dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        var dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        var diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        var isAM = utils.getHours(dateToTransferFrom) < 12;\n        var mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nexport var mergeDateIntoReferenceDate = function mergeDateIntoReferenceDate(utils, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) {\n  return sections.reduce(function (mergedDate, section) {\n    if (!shouldLimitToEditedSections || section.modified) {\n      return transferDateSectionValue(utils, section, dateToTransferFrom, mergedDate);\n    }\n    return mergedDate;\n  }, referenceDate);\n};\nexport var isAndroid = function isAndroid() {\n  return navigator.userAgent.toLowerCase().indexOf('android') > -1;\n};\nexport var clampDaySection = function clampDaySection(utils, sections, sectionsValueBoundaries) {\n  // We try to generate a valid date representing the start of the month of the invalid date typed by the user.\n  var sectionsForStartOfMonth = sections.map(function (section) {\n    if (section.type !== 'day') {\n      return section;\n    }\n    var dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: null,\n      format: section.format,\n      contentType: section.contentType\n    });\n    return _extends({}, section, {\n      value: cleanDigitSectionValue(utils, dayBoundaries.minimum, section.type, section.format, section.hasLeadingZeros, dayBoundaries)\n    });\n  });\n  var startOfMonth = getDateFromDateSections(utils, sectionsForStartOfMonth);\n\n  // Even the start of the month is invalid, we probably have other invalid sections, the clamping failed.\n  if (startOfMonth == null || !utils.isValid(startOfMonth)) {\n    return null;\n  }\n\n  // The only invalid section was the day of the month, we replace its value with the maximum boundary for the correct month.\n  return sections.map(function (section) {\n    if (section.type !== 'day') {\n      return section;\n    }\n    var dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: startOfMonth,\n      format: section.format,\n      contentType: section.contentType\n    });\n    if (Number(section.value) <= dayBoundaries.maximum) {\n      return section;\n    }\n    return _extends({}, section, {\n      value: dayBoundaries.maximum.toString()\n    });\n  });\n};\nexport var getSectionOrder = function getSectionOrder(sections, isRTL) {\n  var neighbors = {};\n  if (!isRTL) {\n    sections.forEach(function (_, index) {\n      var leftIndex = index === 0 ? null : index - 1;\n      var rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex: leftIndex,\n        rightIndex: rightIndex\n      };\n    });\n    return {\n      neighbors: neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  var rtl2ltr = {};\n  var ltr2rtl = {};\n  var groupedSectionsStart = 0;\n  var groupedSectionsEnd = 0;\n  var RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    function (section, index) {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' '));\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (var i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach(function (_, index) {\n    var rtlIndex = ltr2rtl[index];\n    var leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    var rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex: leftIndex,\n      rightIndex: rightIndex\n    };\n  });\n  return {\n    neighbors: neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};","map":{"version":3,"names":["_extends","getDateSectionConfigFromFormatToken","utils","formatToken","config","formatTokenMap","Error","concat","join","type","contentType","sectionType","getDeltaFromKeyCode","keyCode","getDaysInWeekStr","format","elements","now","date","startDate","startOfWeek","endDate","endOfWeek","current","isBefore","push","addDays","map","weekDay","formatByString","getLetterEditingOptions","getMonthArray","month","startOfDay","endOfDay","cleanDigitSectionValue","value","hasLeadingZeros","sectionBoundaries","hasLetter","startOfYear","startOfYearStr","Number","isNaN","process","env","NODE_ENV","setDate","longestMonth","valueStr","toString","size","length","cleanValueStr","adjustSectionValue","section","sectionsValueBoundaries","activeDate","delta","isStart","isEnd","shouldSetAbsolute","adjustDigitSection","currentDate","getCleanValue","minimum","maximum","currentSectionValue","parseInt","newSectionValueNumber","adjustLetterSection","options","currentOptionIndex","indexOf","newOptionIndex","getSectionVisibleValue","willBeRenderedInInput","placeholder","cleanString","dirtyString","replace","addPositionPropertiesToSections","sections","position","positionInInput","newSections","i","renderedValue","sectionStr","startSeparator","endSeparator","sectionLength","sectionLengthInInput","cleanedValue","startInInput","endInInput","start","end","getSectionPlaceholder","localeText","sectionConfig","currentTokenValue","fieldYearPlaceholder","digitAmount","fieldMonthPlaceholder","fieldDayPlaceholder","fieldWeekDayPlaceholder","fieldHoursPlaceholder","fieldMinutesPlaceholder","fieldSecondsPlaceholder","fieldMeridiemPlaceholder","changeSectionValueFormat","currentFormat","newFormat","parse","isFourDigitYearFormat","doesSectionHaveLeadingZeros","formatted0001","setYear","formatted2001","startOfMonth","setHours","setMinutes","getEscapedPartsFromFormat","escapedParts","_utils$escapedCharact","escapedCharacters","startChar","endChar","regExp","RegExp","match","exec","index","lastIndex","splitFormatIntoSections","commitToken","token","expandedToken","expandFormat","sectionValue","isValid","modified","splitFormat","_loop","escapedPartOfCurrentChar","find","escapeIndex","char","isEscapedChar","isEscapeBoundary","cleanSeparator","separator","cleanedSeparator","includes","getDateFromDateSections","shouldSkipWeekDays","some","sectionFormats","sectionValues","shouldSkip","formatWithoutSeparator","dateWithoutSeparatorStr","createDateStrForInputFromSections","formattedArray","getSectionsBoundaries","today","endOfYear","_utils$getMonthArray$","reduce","acc","daysInMonth","getDaysInMonth","maxDaysInMonth","year","_ref","getMonth","day","_ref2","_ref3","daysInWeek","Math","min","apply","_toConsumableArray","max","hours","_ref4","lastHourInDay","getHours","hasMeridiem","minutes","getMinutes","seconds","getSeconds","meridiem","warnedOnceInvalidSection","validateSections","valueType","supportedSections","invalidSection","console","warn","transferDateSectionValue","dateToTransferFrom","dateToTransferTo","getYear","setMonth","formattedDaysInWeek","dayInWeekStrOfActiveDate","dayInWeekOfActiveDate","dayInWeekOfNewSectionValue","diff","getDate","isAM","mergedDateHours","addHours","setSeconds","mergeDateIntoReferenceDate","referenceDate","shouldLimitToEditedSections","mergedDate","isAndroid","navigator","userAgent","toLowerCase","clampDaySection","sectionsForStartOfMonth","dayBoundaries","getSectionOrder","isRTL","neighbors","forEach","_","leftIndex","rightIndex","startIndex","endIndex","rtl2ltr","ltr2rtl","groupedSectionsStart","groupedSectionsEnd","RTLIndex","findIndex","_section$endSeparator","rtlIndex"],"sources":["C:/Users/sirvi/Documents/IT-tradenomikoulutus/OhjelmistoProjektiI/TicketGuru/ticketguruclient/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport const getDateSectionConfigFromFormatToken = (utils, formatToken) => {\n  const config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([`MUI: The token \"${formatToken}\" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit'\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType\n  };\n};\nconst getDeltaFromKeyCode = keyCode => {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport const getDaysInWeekStr = (utils, format) => {\n  const elements = [];\n  const now = utils.date();\n  const startDate = utils.startOfWeek(now);\n  const endDate = utils.endOfWeek(now);\n  let current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(weekDay => utils.formatByString(weekDay, format));\n};\nexport const getLetterEditingOptions = (utils, sectionType, format) => {\n  switch (sectionType) {\n    case 'month':\n      {\n        return utils.getMonthArray(utils.date()).map(month => utils.formatByString(month, format));\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, format);\n      }\n    case 'meridiem':\n      {\n        const now = utils.date();\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport const cleanDigitSectionValue = (utils, value, sectionType, format, hasLeadingZeros, sectionBoundaries) => {\n  const hasLetter = () => {\n    const startOfYear = utils.startOfYear(utils.date());\n    const startOfYearStr = utils.formatByString(startOfYear, format);\n    return Number.isNaN(Number(startOfYearStr));\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    if (sectionType !== 'day' && hasLetter()) {\n      throw new Error([`MUI: The token \"${format}\" is a digit format with letter in it.'\n             This type of format is only supported for 'day' sections`].join('\\n'));\n    }\n  }\n  if (sectionType === 'day' && hasLetter()) {\n    const date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  const valueStr = value.toString();\n  if (hasLeadingZeros) {\n    const size = utils.formatByString(utils.date(), format).length;\n    let cleanValueStr = valueStr;\n\n    // Remove the leading zeros\n    cleanValueStr = Number(cleanValueStr).toString();\n\n    // Add enough leading zeros to fill the section\n    while (cleanValueStr.length < size) {\n      cleanValueStr = `0${cleanValueStr}`;\n    }\n    return cleanValueStr;\n  }\n  return valueStr;\n};\nexport const adjustSectionValue = (utils, section, keyCode, sectionsValueBoundaries, activeDate) => {\n  const delta = getDeltaFromKeyCode(keyCode);\n  const isStart = keyCode === 'Home';\n  const isEnd = keyCode === 'End';\n  const shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  const adjustDigitSection = () => {\n    const sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    const getCleanValue = value => cleanDigitSectionValue(utils, value, section.type, section.format, section.hasLeadingZeros, sectionBoundaries);\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.date(), section.format);\n      }\n      if (delta > 0 || isStart) {\n        return getCleanValue(sectionBoundaries.minimum);\n      }\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    const currentSectionValue = parseInt(section.value, 10);\n    const newSectionValueNumber = currentSectionValue + delta;\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum);\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  const adjustLetterSection = () => {\n    const options = getLetterEditingOptions(utils, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    const currentOptionIndex = options.indexOf(section.value);\n    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nconst getSectionVisibleValue = (section, willBeRenderedInInput) => {\n  const value = section.value || section.placeholder;\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  // Adding the ltr mark is not a problem because it's only for digit (which are always ltr)\n  // The \\u2068 and \\u2069 are cleaned, but not the \\u200e to notice that an update with same digit occurs\n  if (willBeRenderedInInput && section.contentType === 'digit' && !section.hasLeadingZeros && value.length === 1) {\n    return `\\u2068${value}\\u200e\\u2069`;\n  }\n  if (willBeRenderedInInput) {\n    return `\\u2068${value}\\u2069`;\n  }\n  return value;\n};\nexport const cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nexport const addPositionPropertiesToSections = sections => {\n  let position = 0;\n  let positionInInput = 1;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = getSectionVisibleValue(section, true);\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nconst getSectionPlaceholder = (utils, localeText, sectionConfig, currentTokenValue) => {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.date(), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nconst isFourDigitYearFormat = (utils, format) => utils.formatByString(utils.date(), format).length === 4;\nexport const doesSectionHaveLeadingZeros = (utils, contentType, sectionType, format) => {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, format)) {\n          const formatted0001 = utils.formatByString(utils.setYear(utils.date(), 1), format);\n          return formatted0001 === '0001';\n        }\n        const formatted2001 = utils.formatByString(utils.setYear(utils.date(), 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(utils.date()), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(utils.date()), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(utils.date()), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(utils.date(), 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nconst getEscapedPartsFromFormat = (utils, format) => {\n  const escapedParts = [];\n  const {\n    start: startChar,\n    end: endChar\n  } = utils.escapedCharacters;\n  const regExp = new RegExp(`(\\\\${startChar}[^\\\\${endChar}]*\\\\${endChar})+`, 'g');\n  let match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport const splitFormatIntoSections = (utils, localeText, format, date) => {\n  let startSeparator = '';\n  const sections = [];\n  const commitToken = token => {\n    if (token === '') {\n      return null;\n    }\n    const expandedToken = utils.expandFormat(token);\n    if (expandedToken !== token) {\n      return expandedToken;\n    }\n    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    const sectionValue = date == null || !utils.isValid(date) ? '' : utils.formatByString(date, token);\n    const hasLeadingZeros = doesSectionHaveLeadingZeros(utils, sectionConfig.contentType, sectionConfig.type, token);\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, localeText, sectionConfig, token),\n      hasLeadingZeros,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n  const splitFormat = token => {\n    const escapedParts = getEscapedPartsFromFormat(utils, token);\n    let currentTokenValue = '';\n    for (let i = 0; i < token.length; i += 1) {\n      const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);\n      const char = token[i];\n      const isEscapedChar = escapedPartOfCurrentChar != null;\n      if (!isEscapedChar && char.match(/([A-Za-z]+)/)) {\n        currentTokenValue += char;\n      } else {\n        // If we are on the opening or closing character of an escaped part of the format,\n        // Then we ignore this character.\n        const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;\n        if (!isEscapeBoundary) {\n          const expandedToken = commitToken(currentTokenValue);\n          if (expandedToken != null) {\n            splitFormat(expandedToken);\n          }\n          currentTokenValue = '';\n          if (sections.length === 0) {\n            startSeparator += char;\n          } else {\n            sections[sections.length - 1].endSeparator += char;\n          }\n        }\n      }\n    }\n    const expandedToken = commitToken(currentTokenValue);\n    if (expandedToken != null) {\n      splitFormat(expandedToken);\n    }\n  };\n  splitFormat(format);\n  return sections.map(section => {\n    const cleanSeparator = separator => {\n      let cleanedSeparator = separator;\n      if (cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = `\\u2069${cleanedSeparator}\\u2066`;\n      }\n      if (cleanedSeparator === '/') {\n        cleanedSeparator = ' / ';\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport const getDateFromDateSections = (utils, sections) => {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  const shouldSkipWeekDays = sections.some(section => section.type === 'day');\n  const sectionFormats = [];\n  const sectionValues = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, false));\n    }\n  }\n  const formatWithoutSeparator = sectionFormats.join(' ');\n  const dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport const createDateStrForInputFromSections = sections => {\n  const formattedArray = sections.map(section => `${section.startSeparator}${getSectionVisibleValue(section, true)}${section.endSeparator}`);\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return `\\u2066${formattedArray.join('')}\\u2069`;\n};\nexport const getSectionsBoundaries = utils => {\n  const today = utils.date();\n  const endOfYear = utils.endOfYear(today);\n  const {\n    maxDaysInMonth,\n    longestMonth\n  } = utils.getMonthArray(today).reduce((acc, month) => {\n    const daysInMonth = utils.getDaysInMonth(month);\n    if (daysInMonth > acc.maxDaysInMonth) {\n      return {\n        maxDaysInMonth: daysInMonth,\n        longestMonth: month\n      };\n    }\n    return acc;\n  }, {\n    maxDaysInMonth: 0,\n    longestMonth: null\n  });\n  return {\n    year: ({\n      format\n    }) => ({\n      minimum: 0,\n      maximum: isFourDigitYearFormat(utils, format) ? 9999 : 99\n    }),\n    month: () => ({\n      minimum: 1,\n      // Assumption: All years have the same amount of months\n      maximum: utils.getMonth(endOfYear) + 1\n    }),\n    day: ({\n      currentDate\n    }) => ({\n      minimum: 1,\n      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n      longestMonth: longestMonth\n    }),\n    weekDay: ({\n      format,\n      contentType\n    }) => {\n      if (contentType === 'digit') {\n        const daysInWeek = getDaysInWeekStr(utils, format).map(Number);\n        return {\n          minimum: Math.min(...daysInWeek),\n          maximum: Math.max(...daysInWeek)\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: ({\n      format\n    }) => {\n      const lastHourInDay = utils.getHours(endOfYear);\n      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of minutes\n      maximum: utils.getMinutes(endOfYear)\n    }),\n    seconds: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of seconds\n      maximum: utils.getSeconds(endOfYear)\n    }),\n    meridiem: () => ({\n      minimum: 0,\n      maximum: 0\n    })\n  };\n};\nlet warnedOnceInvalidSection = false;\nexport const validateSections = (sections, valueType) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      const supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      const invalidSection = sections.find(section => !supportedSections.includes(section.type));\n      if (invalidSection) {\n        console.warn(`MUI: The field component you are using is not compatible with the \"${invalidSection.type} date section.`, `The supported date sections are [\"${supportedSections.join('\", \"')}\"]\\`.`);\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nconst transferDateSectionValue = (utils, section, dateToTransferFrom, dateToTransferTo) => {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        const formattedDaysInWeek = getDaysInWeekStr(utils, section.format);\n        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        const isAM = utils.getHours(dateToTransferFrom) < 12;\n        const mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nexport const mergeDateIntoReferenceDate = (utils, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) => sections.reduce((mergedDate, section) => {\n  if (!shouldLimitToEditedSections || section.modified) {\n    return transferDateSectionValue(utils, section, dateToTransferFrom, mergedDate);\n  }\n  return mergedDate;\n}, referenceDate);\nexport const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;\nexport const clampDaySection = (utils, sections, sectionsValueBoundaries) => {\n  // We try to generate a valid date representing the start of the month of the invalid date typed by the user.\n  const sectionsForStartOfMonth = sections.map(section => {\n    if (section.type !== 'day') {\n      return section;\n    }\n    const dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: null,\n      format: section.format,\n      contentType: section.contentType\n    });\n    return _extends({}, section, {\n      value: cleanDigitSectionValue(utils, dayBoundaries.minimum, section.type, section.format, section.hasLeadingZeros, dayBoundaries)\n    });\n  });\n  const startOfMonth = getDateFromDateSections(utils, sectionsForStartOfMonth);\n\n  // Even the start of the month is invalid, we probably have other invalid sections, the clamping failed.\n  if (startOfMonth == null || !utils.isValid(startOfMonth)) {\n    return null;\n  }\n\n  // The only invalid section was the day of the month, we replace its value with the maximum boundary for the correct month.\n  return sections.map(section => {\n    if (section.type !== 'day') {\n      return section;\n    }\n    const dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: startOfMonth,\n      format: section.format,\n      contentType: section.contentType\n    });\n    if (Number(section.value) <= dayBoundaries.maximum) {\n      return section;\n    }\n    return _extends({}, section, {\n      value: dayBoundaries.maximum.toString()\n    });\n  });\n};\nexport const getSectionOrder = (sections, isRTL) => {\n  const neighbors = {};\n  if (!isRTL) {\n    sections.forEach((_, index) => {\n      const leftIndex = index === 0 ? null : index - 1;\n      const rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex,\n        rightIndex\n      };\n    });\n    return {\n      neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  const rtl2ltr = {};\n  const ltr2rtl = {};\n  let groupedSectionsStart = 0;\n  let groupedSectionsEnd = 0;\n  let RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    (section, index) => {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' '));\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach((_, index) => {\n    const rtlIndex = ltr2rtl[index];\n    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex,\n      rightIndex\n    };\n  });\n  return {\n    neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,IAAMC,mCAAmC,GAAG,SAAtCA,mCAAmCA,CAAIC,KAAK,EAAEC,WAAW,EAAK;EACzE,IAAMC,MAAM,GAAGF,KAAK,CAACG,cAAc,CAACF,WAAW,CAAC;EAChD,IAAIC,MAAM,IAAI,IAAI,EAAE;IAClB,MAAM,IAAIE,KAAK,CAAC,qBAAAC,MAAA,CAAoBJ,WAAW,wDAAoD,wIAAwI,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1P;EACA,IAAI,OAAOJ,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAO;MACLK,IAAI,EAAEL,MAAM;MACZM,WAAW,EAAEN,MAAM,KAAK,UAAU,GAAG,QAAQ,GAAG;IAClD,CAAC;EACH;EACA,OAAO;IACLK,IAAI,EAAEL,MAAM,CAACO,WAAW;IACxBD,WAAW,EAAEN,MAAM,CAACM;EACtB,CAAC;AACH,CAAC;AACD,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAGC,OAAO,EAAI;EACrC,QAAQA,OAAO;IACb,KAAK,SAAS;MACZ,OAAO,CAAC;IACV,KAAK,WAAW;MACd,OAAO,CAAC,CAAC;IACX,KAAK,QAAQ;MACX,OAAO,CAAC;IACV,KAAK,UAAU;MACb,OAAO,CAAC,CAAC;IACX;MACE,OAAO,CAAC;EAAC;AAEf,CAAC;AACD,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIZ,KAAK,EAAEa,MAAM,EAAK;EACjD,IAAMC,QAAQ,GAAG,EAAE;EACnB,IAAMC,GAAG,GAAGf,KAAK,CAACgB,IAAI,EAAE;EACxB,IAAMC,SAAS,GAAGjB,KAAK,CAACkB,WAAW,CAACH,GAAG,CAAC;EACxC,IAAMI,OAAO,GAAGnB,KAAK,CAACoB,SAAS,CAACL,GAAG,CAAC;EACpC,IAAIM,OAAO,GAAGJ,SAAS;EACvB,OAAOjB,KAAK,CAACsB,QAAQ,CAACD,OAAO,EAAEF,OAAO,CAAC,EAAE;IACvCL,QAAQ,CAACS,IAAI,CAACF,OAAO,CAAC;IACtBA,OAAO,GAAGrB,KAAK,CAACwB,OAAO,CAACH,OAAO,EAAE,CAAC,CAAC;EACrC;EACA,OAAOP,QAAQ,CAACW,GAAG,CAAC,UAAAC,OAAO;IAAA,OAAI1B,KAAK,CAAC2B,cAAc,CAACD,OAAO,EAAEb,MAAM,CAAC;EAAA,EAAC;AACvE,CAAC;AACD,OAAO,IAAMe,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAI5B,KAAK,EAAES,WAAW,EAAEI,MAAM,EAAK;EACrE,QAAQJ,WAAW;IACjB,KAAK,OAAO;MACV;QACE,OAAOT,KAAK,CAAC6B,aAAa,CAAC7B,KAAK,CAACgB,IAAI,EAAE,CAAC,CAACS,GAAG,CAAC,UAAAK,KAAK;UAAA,OAAI9B,KAAK,CAAC2B,cAAc,CAACG,KAAK,EAAEjB,MAAM,CAAC;QAAA,EAAC;MAC5F;IACF,KAAK,SAAS;MACZ;QACE,OAAOD,gBAAgB,CAACZ,KAAK,EAAEa,MAAM,CAAC;MACxC;IACF,KAAK,UAAU;MACb;QACE,IAAME,GAAG,GAAGf,KAAK,CAACgB,IAAI,EAAE;QACxB,OAAO,CAAChB,KAAK,CAAC+B,UAAU,CAAChB,GAAG,CAAC,EAAEf,KAAK,CAACgC,QAAQ,CAACjB,GAAG,CAAC,CAAC,CAACU,GAAG,CAAC,UAAAT,IAAI;UAAA,OAAIhB,KAAK,CAAC2B,cAAc,CAACX,IAAI,EAAEH,MAAM,CAAC;QAAA,EAAC;MACrG;IACF;MACE;QACE,OAAO,EAAE;MACX;EAAC;AAEP,CAAC;AACD,OAAO,IAAMoB,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIjC,KAAK,EAAEkC,KAAK,EAAEzB,WAAW,EAAEI,MAAM,EAAEsB,eAAe,EAAEC,iBAAiB,EAAK;EAC/G,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IACtB,IAAMC,WAAW,GAAGtC,KAAK,CAACsC,WAAW,CAACtC,KAAK,CAACgB,IAAI,EAAE,CAAC;IACnD,IAAMuB,cAAc,GAAGvC,KAAK,CAAC2B,cAAc,CAACW,WAAW,EAAEzB,MAAM,CAAC;IAChE,OAAO2B,MAAM,CAACC,KAAK,CAACD,MAAM,CAACD,cAAc,CAAC,CAAC;EAC7C,CAAC;EACD,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAInC,WAAW,KAAK,KAAK,IAAI4B,SAAS,EAAE,EAAE;MACxC,MAAM,IAAIjC,KAAK,CAAC,qBAAAC,MAAA,CAAoBQ,MAAM,qHACuB,CAACP,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/E;EACF;EACA,IAAIG,WAAW,KAAK,KAAK,IAAI4B,SAAS,EAAE,EAAE;IACxC,IAAMrB,IAAI,GAAGhB,KAAK,CAAC6C,OAAO,CAACT,iBAAiB,CAACU,YAAY,EAAEZ,KAAK,CAAC;IACjE,OAAOlC,KAAK,CAAC2B,cAAc,CAACX,IAAI,EAAEH,MAAM,CAAC;EAC3C;;EAEA;EACA,IAAMkC,QAAQ,GAAGb,KAAK,CAACc,QAAQ,EAAE;EACjC,IAAIb,eAAe,EAAE;IACnB,IAAMc,IAAI,GAAGjD,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACgB,IAAI,EAAE,EAAEH,MAAM,CAAC,CAACqC,MAAM;IAC9D,IAAIC,aAAa,GAAGJ,QAAQ;;IAE5B;IACAI,aAAa,GAAGX,MAAM,CAACW,aAAa,CAAC,CAACH,QAAQ,EAAE;;IAEhD;IACA,OAAOG,aAAa,CAACD,MAAM,GAAGD,IAAI,EAAE;MAClCE,aAAa,OAAA9C,MAAA,CAAO8C,aAAa,CAAE;IACrC;IACA,OAAOA,aAAa;EACtB;EACA,OAAOJ,QAAQ;AACjB,CAAC;AACD,OAAO,IAAMK,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIpD,KAAK,EAAEqD,OAAO,EAAE1C,OAAO,EAAE2C,uBAAuB,EAAEC,UAAU,EAAK;EAClG,IAAMC,KAAK,GAAG9C,mBAAmB,CAACC,OAAO,CAAC;EAC1C,IAAM8C,OAAO,GAAG9C,OAAO,KAAK,MAAM;EAClC,IAAM+C,KAAK,GAAG/C,OAAO,KAAK,KAAK;EAC/B,IAAMgD,iBAAiB,GAAGN,OAAO,CAACnB,KAAK,KAAK,EAAE,IAAIuB,OAAO,IAAIC,KAAK;EAClE,IAAME,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/B,IAAMxB,iBAAiB,GAAGkB,uBAAuB,CAACD,OAAO,CAAC9C,IAAI,CAAC,CAAC;MAC9DsD,WAAW,EAAEN,UAAU;MACvB1C,MAAM,EAAEwC,OAAO,CAACxC,MAAM;MACtBL,WAAW,EAAE6C,OAAO,CAAC7C;IACvB,CAAC,CAAC;IACF,IAAMsD,aAAa,GAAG,SAAhBA,aAAaA,CAAG5B,KAAK;MAAA,OAAID,sBAAsB,CAACjC,KAAK,EAAEkC,KAAK,EAAEmB,OAAO,CAAC9C,IAAI,EAAE8C,OAAO,CAACxC,MAAM,EAAEwC,OAAO,CAAClB,eAAe,EAAEC,iBAAiB,CAAC;IAAA;IAC7I,IAAIuB,iBAAiB,EAAE;MACrB,IAAIN,OAAO,CAAC9C,IAAI,KAAK,MAAM,IAAI,CAACmD,KAAK,IAAI,CAACD,OAAO,EAAE;QACjD,OAAOzD,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACgB,IAAI,EAAE,EAAEqC,OAAO,CAACxC,MAAM,CAAC;MAC3D;MACA,IAAI2C,KAAK,GAAG,CAAC,IAAIC,OAAO,EAAE;QACxB,OAAOK,aAAa,CAAC1B,iBAAiB,CAAC2B,OAAO,CAAC;MACjD;MACA,OAAOD,aAAa,CAAC1B,iBAAiB,CAAC4B,OAAO,CAAC;IACjD;IACA,IAAMC,mBAAmB,GAAGC,QAAQ,CAACb,OAAO,CAACnB,KAAK,EAAE,EAAE,CAAC;IACvD,IAAMiC,qBAAqB,GAAGF,mBAAmB,GAAGT,KAAK;IACzD,IAAIW,qBAAqB,GAAG/B,iBAAiB,CAAC4B,OAAO,EAAE;MACrD,OAAOF,aAAa,CAAC1B,iBAAiB,CAAC2B,OAAO,CAAC;IACjD;IACA,IAAII,qBAAqB,GAAG/B,iBAAiB,CAAC2B,OAAO,EAAE;MACrD,OAAOD,aAAa,CAAC1B,iBAAiB,CAAC4B,OAAO,CAAC;IACjD;IACA,OAAOF,aAAa,CAACK,qBAAqB,CAAC;EAC7C,CAAC;EACD,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;IAChC,IAAMC,OAAO,GAAGzC,uBAAuB,CAAC5B,KAAK,EAAEqD,OAAO,CAAC9C,IAAI,EAAE8C,OAAO,CAACxC,MAAM,CAAC;IAC5E,IAAIwD,OAAO,CAACnB,MAAM,KAAK,CAAC,EAAE;MACxB,OAAOG,OAAO,CAACnB,KAAK;IACtB;IACA,IAAIyB,iBAAiB,EAAE;MACrB,IAAIH,KAAK,GAAG,CAAC,IAAIC,OAAO,EAAE;QACxB,OAAOY,OAAO,CAAC,CAAC,CAAC;MACnB;MACA,OAAOA,OAAO,CAACA,OAAO,CAACnB,MAAM,GAAG,CAAC,CAAC;IACpC;IACA,IAAMoB,kBAAkB,GAAGD,OAAO,CAACE,OAAO,CAAClB,OAAO,CAACnB,KAAK,CAAC;IACzD,IAAMsC,cAAc,GAAG,CAACF,kBAAkB,GAAGD,OAAO,CAACnB,MAAM,GAAGM,KAAK,IAAIa,OAAO,CAACnB,MAAM;IACrF,OAAOmB,OAAO,CAACG,cAAc,CAAC;EAChC,CAAC;EACD,IAAInB,OAAO,CAAC7C,WAAW,KAAK,OAAO,EAAE;IACnC,OAAOoD,kBAAkB,EAAE;EAC7B;EACA,OAAOQ,mBAAmB,EAAE;AAC9B,CAAC;AACD,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIpB,OAAO,EAAEqB,qBAAqB,EAAK;EACjE,IAAMxC,KAAK,GAAGmB,OAAO,CAACnB,KAAK,IAAImB,OAAO,CAACsB,WAAW;;EAElD;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAID,qBAAqB,IAAIrB,OAAO,CAAC7C,WAAW,KAAK,OAAO,IAAI,CAAC6C,OAAO,CAAClB,eAAe,IAAID,KAAK,CAACgB,MAAM,KAAK,CAAC,EAAE;IAC9G,gBAAA7C,MAAA,CAAgB6B,KAAK;EACvB;EACA,IAAIwC,qBAAqB,EAAE;IACzB,gBAAArE,MAAA,CAAgB6B,KAAK;EACvB;EACA,OAAOA,KAAK;AACd,CAAC;AACD,OAAO,IAAM0C,WAAW,GAAG,SAAdA,WAAWA,CAAGC,WAAW;EAAA,OAAIA,WAAW,CAACC,OAAO,CAAC,6BAA6B,EAAE,EAAE,CAAC;AAAA;AAChG,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAA+BA,CAAGC,QAAQ,EAAI;EACzD,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,eAAe,GAAG,CAAC;EACvB,IAAMC,WAAW,GAAG,EAAE;EACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAAC9B,MAAM,EAAEkC,CAAC,IAAI,CAAC,EAAE;IAC3C,IAAM/B,OAAO,GAAG2B,QAAQ,CAACI,CAAC,CAAC;IAC3B,IAAMC,aAAa,GAAGZ,sBAAsB,CAACpB,OAAO,EAAE,IAAI,CAAC;IAC3D,IAAMiC,UAAU,MAAAjF,MAAA,CAAMgD,OAAO,CAACkC,cAAc,EAAAlF,MAAA,CAAGgF,aAAa,EAAAhF,MAAA,CAAGgD,OAAO,CAACmC,YAAY,CAAE;IACrF,IAAMC,aAAa,GAAGb,WAAW,CAACU,UAAU,CAAC,CAACpC,MAAM;IACpD,IAAMwC,oBAAoB,GAAGJ,UAAU,CAACpC,MAAM;;IAE9C;IACA,IAAMyC,YAAY,GAAGf,WAAW,CAACS,aAAa,CAAC;IAC/C,IAAMO,YAAY,GAAGV,eAAe,GAAGG,aAAa,CAACd,OAAO,CAACoB,YAAY,CAAC,CAAC,CAAC,CAAC,GAAGtC,OAAO,CAACkC,cAAc,CAACrC,MAAM;IAC7G,IAAM2C,UAAU,GAAGD,YAAY,GAAGD,YAAY,CAACzC,MAAM;IACrDiC,WAAW,CAAC5D,IAAI,CAACzB,QAAQ,CAAC,CAAC,CAAC,EAAEuD,OAAO,EAAE;MACrCyC,KAAK,EAAEb,QAAQ;MACfc,GAAG,EAAEd,QAAQ,GAAGQ,aAAa;MAC7BG,YAAY,EAAZA,YAAY;MACZC,UAAU,EAAVA;IACF,CAAC,CAAC,CAAC;IACHZ,QAAQ,IAAIQ,aAAa;IACzB;IACAP,eAAe,IAAIQ,oBAAoB;EACzC;EACA,OAAOP,WAAW;AACpB,CAAC;AACD,IAAMa,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIhG,KAAK,EAAEiG,UAAU,EAAEC,aAAa,EAAEC,iBAAiB,EAAK;EACrF,QAAQD,aAAa,CAAC3F,IAAI;IACxB,KAAK,MAAM;MACT;QACE,OAAO0F,UAAU,CAACG,oBAAoB,CAAC;UACrCC,WAAW,EAAErG,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACgB,IAAI,EAAE,EAAEmF,iBAAiB,CAAC,CAACjD;QACrE,CAAC,CAAC;MACJ;IACF,KAAK,OAAO;MACV;QACE,OAAO+C,UAAU,CAACK,qBAAqB,CAAC;UACtC9F,WAAW,EAAE0F,aAAa,CAAC1F;QAC7B,CAAC,CAAC;MACJ;IACF,KAAK,KAAK;MACR;QACE,OAAOyF,UAAU,CAACM,mBAAmB,EAAE;MACzC;IACF,KAAK,SAAS;MACZ;QACE,OAAON,UAAU,CAACO,uBAAuB,CAAC;UACxChG,WAAW,EAAE0F,aAAa,CAAC1F;QAC7B,CAAC,CAAC;MACJ;IACF,KAAK,OAAO;MACV;QACE,OAAOyF,UAAU,CAACQ,qBAAqB,EAAE;MAC3C;IACF,KAAK,SAAS;MACZ;QACE,OAAOR,UAAU,CAACS,uBAAuB,EAAE;MAC7C;IACF,KAAK,SAAS;MACZ;QACE,OAAOT,UAAU,CAACU,uBAAuB,EAAE;MAC7C;IACF,KAAK,UAAU;MACb;QACE,OAAOV,UAAU,CAACW,wBAAwB,EAAE;MAC9C;IACF;MACE;QACE,OAAOT,iBAAiB;MAC1B;EAAC;AAEP,CAAC;AACD,OAAO,IAAMU,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAI7G,KAAK,EAAE+C,QAAQ,EAAE+D,aAAa,EAAEC,SAAS,EAAK;EACrF,IAAIrE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI7C,mCAAmC,CAACC,KAAK,EAAE8G,aAAa,CAAC,CAACvG,IAAI,KAAK,SAAS,EAAE;MAChF,MAAM,IAAIH,KAAK,CAAC,2DAA2D,CAAC;IAC9E;EACF;EACA,OAAOJ,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACgH,KAAK,CAACjE,QAAQ,EAAE+D,aAAa,CAAC,EAAEC,SAAS,CAAC;AAC9E,CAAC;AACD,IAAME,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIjH,KAAK,EAAEa,MAAM;EAAA,OAAKb,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACgB,IAAI,EAAE,EAAEH,MAAM,CAAC,CAACqC,MAAM,KAAK,CAAC;AAAA;AACxG,OAAO,IAAMgE,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAAIlH,KAAK,EAAEQ,WAAW,EAAEC,WAAW,EAAEI,MAAM,EAAK;EACtF,IAAIL,WAAW,KAAK,OAAO,EAAE;IAC3B,OAAO,KAAK;EACd;EACA,QAAQC,WAAW;IACjB;IACA,KAAK,MAAM;MACT;QACE,IAAIwG,qBAAqB,CAACjH,KAAK,EAAEa,MAAM,CAAC,EAAE;UACxC,IAAMsG,aAAa,GAAGnH,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACoH,OAAO,CAACpH,KAAK,CAACgB,IAAI,EAAE,EAAE,CAAC,CAAC,EAAEH,MAAM,CAAC;UAClF,OAAOsG,aAAa,KAAK,MAAM;QACjC;QACA,IAAME,aAAa,GAAGrH,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACoH,OAAO,CAACpH,KAAK,CAACgB,IAAI,EAAE,EAAE,IAAI,CAAC,EAAEH,MAAM,CAAC;QACrF,OAAOwG,aAAa,KAAK,IAAI;MAC/B;IACF,KAAK,OAAO;MACV;QACE,OAAOrH,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACsC,WAAW,CAACtC,KAAK,CAACgB,IAAI,EAAE,CAAC,EAAEH,MAAM,CAAC,CAACqC,MAAM,GAAG,CAAC;MACjF;IACF,KAAK,KAAK;MACR;QACE,OAAOlD,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACsH,YAAY,CAACtH,KAAK,CAACgB,IAAI,EAAE,CAAC,EAAEH,MAAM,CAAC,CAACqC,MAAM,GAAG,CAAC;MAClF;IACF,KAAK,SAAS;MACZ;QACE,OAAOlD,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACkB,WAAW,CAAClB,KAAK,CAACgB,IAAI,EAAE,CAAC,EAAEH,MAAM,CAAC,CAACqC,MAAM,GAAG,CAAC;MACjF;IACF,KAAK,OAAO;MACV;QACE,OAAOlD,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACuH,QAAQ,CAACvH,KAAK,CAACgB,IAAI,EAAE,EAAE,CAAC,CAAC,EAAEH,MAAM,CAAC,CAACqC,MAAM,GAAG,CAAC;MACjF;IACF,KAAK,SAAS;MACZ;QACE,OAAOlD,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACwH,UAAU,CAACxH,KAAK,CAACgB,IAAI,EAAE,EAAE,CAAC,CAAC,EAAEH,MAAM,CAAC,CAACqC,MAAM,GAAG,CAAC;MACnF;IACF,KAAK,SAAS;MACZ;QACE,OAAOlD,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACwH,UAAU,CAACxH,KAAK,CAACgB,IAAI,EAAE,EAAE,CAAC,CAAC,EAAEH,MAAM,CAAC,CAACqC,MAAM,GAAG,CAAC;MACnF;IACF;MACE;QACE,MAAM,IAAI9C,KAAK,CAAC,sBAAsB,CAAC;MACzC;EAAC;AAEP,CAAC;AACD,IAAMqH,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIzH,KAAK,EAAEa,MAAM,EAAK;EACnD,IAAM6G,YAAY,GAAG,EAAE;EACvB,IAAAC,qBAAA,GAGI3H,KAAK,CAAC4H,iBAAiB;IAFlBC,SAAS,GAAAF,qBAAA,CAAhB7B,KAAK;IACAgC,OAAO,GAAAH,qBAAA,CAAZ5B,GAAG;EAEL,IAAMgC,MAAM,GAAG,IAAIC,MAAM,OAAA3H,MAAA,CAAOwH,SAAS,UAAAxH,MAAA,CAAOyH,OAAO,UAAAzH,MAAA,CAAOyH,OAAO,SAAM,GAAG,CAAC;EAC/E,IAAIG,KAAK,GAAG,IAAI;EAChB;EACA,OAAOA,KAAK,GAAGF,MAAM,CAACG,IAAI,CAACrH,MAAM,CAAC,EAAE;IAClC6G,YAAY,CAACnG,IAAI,CAAC;MAChBuE,KAAK,EAAEmC,KAAK,CAACE,KAAK;MAClBpC,GAAG,EAAEgC,MAAM,CAACK,SAAS,GAAG;IAC1B,CAAC,CAAC;EACJ;EACA,OAAOV,YAAY;AACrB,CAAC;AACD,OAAO,IAAMW,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIrI,KAAK,EAAEiG,UAAU,EAAEpF,MAAM,EAAEG,IAAI,EAAK;EAC1E,IAAIuE,cAAc,GAAG,EAAE;EACvB,IAAMP,QAAQ,GAAG,EAAE;EACnB,IAAMsD,WAAW,GAAG,SAAdA,WAAWA,CAAGC,KAAK,EAAI;IAC3B,IAAIA,KAAK,KAAK,EAAE,EAAE;MAChB,OAAO,IAAI;IACb;IACA,IAAMC,aAAa,GAAGxI,KAAK,CAACyI,YAAY,CAACF,KAAK,CAAC;IAC/C,IAAIC,aAAa,KAAKD,KAAK,EAAE;MAC3B,OAAOC,aAAa;IACtB;IACA,IAAMtC,aAAa,GAAGnG,mCAAmC,CAACC,KAAK,EAAEuI,KAAK,CAAC;IACvE,IAAMG,YAAY,GAAG1H,IAAI,IAAI,IAAI,IAAI,CAAChB,KAAK,CAAC2I,OAAO,CAAC3H,IAAI,CAAC,GAAG,EAAE,GAAGhB,KAAK,CAAC2B,cAAc,CAACX,IAAI,EAAEuH,KAAK,CAAC;IAClG,IAAMpG,eAAe,GAAG+E,2BAA2B,CAAClH,KAAK,EAAEkG,aAAa,CAAC1F,WAAW,EAAE0F,aAAa,CAAC3F,IAAI,EAAEgI,KAAK,CAAC;IAChHvD,QAAQ,CAACzD,IAAI,CAACzB,QAAQ,CAAC,CAAC,CAAC,EAAEoG,aAAa,EAAE;MACxCrF,MAAM,EAAE0H,KAAK;MACbrG,KAAK,EAAEwG,YAAY;MACnB/D,WAAW,EAAEqB,qBAAqB,CAAChG,KAAK,EAAEiG,UAAU,EAAEC,aAAa,EAAEqC,KAAK,CAAC;MAC3EpG,eAAe,EAAfA,eAAe;MACfoD,cAAc,EAAEP,QAAQ,CAAC9B,MAAM,KAAK,CAAC,GAAGqC,cAAc,GAAG,EAAE;MAC3DC,YAAY,EAAE,EAAE;MAChBoD,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IACH,OAAO,IAAI;EACb,CAAC;EACD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAGN,KAAK,EAAI;IAC3B,IAAMb,YAAY,GAAGD,yBAAyB,CAACzH,KAAK,EAAEuI,KAAK,CAAC;IAC5D,IAAIpC,iBAAiB,GAAG,EAAE;IAAC,IAAA2C,KAAA,YAAAA,MAAA1D,CAAA,EACe;MACxC,IAAM2D,wBAAwB,GAAGrB,YAAY,CAACsB,IAAI,CAAC,UAAAC,WAAW;QAAA,OAAIA,WAAW,CAACnD,KAAK,IAAIV,CAAC,IAAI6D,WAAW,CAAClD,GAAG,IAAIX,CAAC;MAAA,EAAC;MACjH,IAAM8D,IAAI,GAAGX,KAAK,CAACnD,CAAC,CAAC;MACrB,IAAM+D,aAAa,GAAGJ,wBAAwB,IAAI,IAAI;MACtD,IAAI,CAACI,aAAa,IAAID,IAAI,CAACjB,KAAK,CAAC,aAAa,CAAC,EAAE;QAC/C9B,iBAAiB,IAAI+C,IAAI;MAC3B,CAAC,MAAM;QACL;QACA;QACA,IAAME,gBAAgB,GAAGD,aAAa,IAAI,CAACJ,wBAAwB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,wBAAwB,CAACjD,KAAK,MAAMV,CAAC,IAAI,CAAC2D,wBAAwB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,wBAAwB,CAAChD,GAAG,MAAMX,CAAC;QAChN,IAAI,CAACgE,gBAAgB,EAAE;UACrB,IAAMZ,cAAa,GAAGF,WAAW,CAACnC,iBAAiB,CAAC;UACpD,IAAIqC,cAAa,IAAI,IAAI,EAAE;YACzBK,WAAW,CAACL,cAAa,CAAC;UAC5B;UACArC,iBAAiB,GAAG,EAAE;UACtB,IAAInB,QAAQ,CAAC9B,MAAM,KAAK,CAAC,EAAE;YACzBqC,cAAc,IAAI2D,IAAI;UACxB,CAAC,MAAM;YACLlE,QAAQ,CAACA,QAAQ,CAAC9B,MAAM,GAAG,CAAC,CAAC,CAACsC,YAAY,IAAI0D,IAAI;UACpD;QACF;MACF;IACF,CAAC;IAvBD,KAAK,IAAI9D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmD,KAAK,CAACrF,MAAM,EAAEkC,CAAC,IAAI,CAAC;MAAA0D,KAAA,CAAA1D,CAAA;IAAA;IAwBxC,IAAMoD,aAAa,GAAGF,WAAW,CAACnC,iBAAiB,CAAC;IACpD,IAAIqC,aAAa,IAAI,IAAI,EAAE;MACzBK,WAAW,CAACL,aAAa,CAAC;IAC5B;EACF,CAAC;EACDK,WAAW,CAAChI,MAAM,CAAC;EACnB,OAAOmE,QAAQ,CAACvD,GAAG,CAAC,UAAA4B,OAAO,EAAI;IAC7B,IAAMgG,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,SAAS,EAAI;MAClC,IAAIC,gBAAgB,GAAGD,SAAS;MAChC,IAAIC,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC/DD,gBAAgB,YAAAlJ,MAAA,CAAYkJ,gBAAgB,WAAQ;MACtD;MACA,IAAIA,gBAAgB,KAAK,GAAG,EAAE;QAC5BA,gBAAgB,GAAG,KAAK;MAC1B;MACA,OAAOA,gBAAgB;IACzB,CAAC;IACDlG,OAAO,CAACkC,cAAc,GAAG8D,cAAc,CAAChG,OAAO,CAACkC,cAAc,CAAC;IAC/DlC,OAAO,CAACmC,YAAY,GAAG6D,cAAc,CAAChG,OAAO,CAACmC,YAAY,CAAC;IAC3D,OAAOnC,OAAO;EAChB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,IAAMoG,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIzJ,KAAK,EAAEgF,QAAQ,EAAK;EAC1D;EACA;EACA;EACA,IAAM0E,kBAAkB,GAAG1E,QAAQ,CAAC2E,IAAI,CAAC,UAAAtG,OAAO;IAAA,OAAIA,OAAO,CAAC9C,IAAI,KAAK,KAAK;EAAA,EAAC;EAC3E,IAAMqJ,cAAc,GAAG,EAAE;EACzB,IAAMC,aAAa,GAAG,EAAE;EACxB,KAAK,IAAIzE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAAC9B,MAAM,EAAEkC,CAAC,IAAI,CAAC,EAAE;IAC3C,IAAM/B,OAAO,GAAG2B,QAAQ,CAACI,CAAC,CAAC;IAC3B,IAAM0E,UAAU,GAAGJ,kBAAkB,IAAIrG,OAAO,CAAC9C,IAAI,KAAK,SAAS;IACnE,IAAI,CAACuJ,UAAU,EAAE;MACfF,cAAc,CAACrI,IAAI,CAAC8B,OAAO,CAACxC,MAAM,CAAC;MACnCgJ,aAAa,CAACtI,IAAI,CAACkD,sBAAsB,CAACpB,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5D;EACF;EACA,IAAM0G,sBAAsB,GAAGH,cAAc,CAACtJ,IAAI,CAAC,GAAG,CAAC;EACvD,IAAM0J,uBAAuB,GAAGH,aAAa,CAACvJ,IAAI,CAAC,GAAG,CAAC;EACvD,OAAON,KAAK,CAACgH,KAAK,CAACgD,uBAAuB,EAAED,sBAAsB,CAAC;AACrE,CAAC;AACD,OAAO,IAAME,iCAAiC,GAAG,SAApCA,iCAAiCA,CAAGjF,QAAQ,EAAI;EAC3D,IAAMkF,cAAc,GAAGlF,QAAQ,CAACvD,GAAG,CAAC,UAAA4B,OAAO;IAAA,UAAAhD,MAAA,CAAOgD,OAAO,CAACkC,cAAc,EAAAlF,MAAA,CAAGoE,sBAAsB,CAACpB,OAAO,EAAE,IAAI,CAAC,EAAAhD,MAAA,CAAGgD,OAAO,CAACmC,YAAY;EAAA,CAAE,CAAC;;EAE1I;EACA;EACA;EACA;EACA;EACA,gBAAAnF,MAAA,CAAgB6J,cAAc,CAAC5J,IAAI,CAAC,EAAE,CAAC;AACzC,CAAC;AACD,OAAO,IAAM6J,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAGnK,KAAK,EAAI;EAC5C,IAAMoK,KAAK,GAAGpK,KAAK,CAACgB,IAAI,EAAE;EAC1B,IAAMqJ,SAAS,GAAGrK,KAAK,CAACqK,SAAS,CAACD,KAAK,CAAC;EACxC,IAAAE,qBAAA,GAGItK,KAAK,CAAC6B,aAAa,CAACuI,KAAK,CAAC,CAACG,MAAM,CAAC,UAACC,GAAG,EAAE1I,KAAK,EAAK;MACpD,IAAM2I,WAAW,GAAGzK,KAAK,CAAC0K,cAAc,CAAC5I,KAAK,CAAC;MAC/C,IAAI2I,WAAW,GAAGD,GAAG,CAACG,cAAc,EAAE;QACpC,OAAO;UACLA,cAAc,EAAEF,WAAW;UAC3B3H,YAAY,EAAEhB;QAChB,CAAC;MACH;MACA,OAAO0I,GAAG;IACZ,CAAC,EAAE;MACDG,cAAc,EAAE,CAAC;MACjB7H,YAAY,EAAE;IAChB,CAAC,CAAC;IAdA6H,cAAc,GAAAL,qBAAA,CAAdK,cAAc;IACd7H,YAAY,GAAAwH,qBAAA,CAAZxH,YAAY;EAcd,OAAO;IACL8H,IAAI,EAAE,SAAAA,KAAAC,IAAA;MAAA,IACJhK,MAAM,GAAAgK,IAAA,CAANhK,MAAM;MAAA,OACD;QACLkD,OAAO,EAAE,CAAC;QACVC,OAAO,EAAEiD,qBAAqB,CAACjH,KAAK,EAAEa,MAAM,CAAC,GAAG,IAAI,GAAG;MACzD,CAAC;IAAA,CAAC;IACFiB,KAAK,EAAE,SAAAA,MAAA;MAAA,OAAO;QACZiC,OAAO,EAAE,CAAC;QACV;QACAC,OAAO,EAAEhE,KAAK,CAAC8K,QAAQ,CAACT,SAAS,CAAC,GAAG;MACvC,CAAC;IAAA,CAAC;IACFU,GAAG,EAAE,SAAAA,IAAAC,KAAA;MAAA,IACHnH,WAAW,GAAAmH,KAAA,CAAXnH,WAAW;MAAA,OACN;QACLE,OAAO,EAAE,CAAC;QACVC,OAAO,EAAEH,WAAW,IAAI,IAAI,IAAI7D,KAAK,CAAC2I,OAAO,CAAC9E,WAAW,CAAC,GAAG7D,KAAK,CAAC0K,cAAc,CAAC7G,WAAW,CAAC,GAAG8G,cAAc;QAC/G7H,YAAY,EAAEA;MAChB,CAAC;IAAA,CAAC;IACFpB,OAAO,EAAE,SAAAA,QAAAuJ,KAAA,EAGH;MAAA,IAFJpK,MAAM,GAAAoK,KAAA,CAANpK,MAAM;QACNL,WAAW,GAAAyK,KAAA,CAAXzK,WAAW;MAEX,IAAIA,WAAW,KAAK,OAAO,EAAE;QAC3B,IAAM0K,UAAU,GAAGtK,gBAAgB,CAACZ,KAAK,EAAEa,MAAM,CAAC,CAACY,GAAG,CAACe,MAAM,CAAC;QAC9D,OAAO;UACLuB,OAAO,EAAEoH,IAAI,CAACC,GAAG,CAAAC,KAAA,CAARF,IAAI,EAAAG,kBAAA,CAAQJ,UAAU,EAAC;UAChClH,OAAO,EAAEmH,IAAI,CAACI,GAAG,CAAAF,KAAA,CAARF,IAAI,EAAAG,kBAAA,CAAQJ,UAAU;QACjC,CAAC;MACH;MACA,OAAO;QACLnH,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACX,CAAC;IACH,CAAC;IACDwH,KAAK,EAAE,SAAAA,MAAAC,KAAA,EAED;MAAA,IADJ5K,MAAM,GAAA4K,KAAA,CAAN5K,MAAM;MAEN,IAAM6K,aAAa,GAAG1L,KAAK,CAAC2L,QAAQ,CAACtB,SAAS,CAAC;MAC/C,IAAMuB,WAAW,GAAG5L,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAACgC,QAAQ,CAACoI,KAAK,CAAC,EAAEvJ,MAAM,CAAC,KAAK6K,aAAa,CAAC1I,QAAQ,EAAE;MACpG,IAAI4I,WAAW,EAAE;QACf,OAAO;UACL7H,OAAO,EAAE,CAAC;UACVC,OAAO,EAAExB,MAAM,CAACxC,KAAK,CAAC2B,cAAc,CAAC3B,KAAK,CAAC+B,UAAU,CAACqI,KAAK,CAAC,EAAEvJ,MAAM,CAAC;QACvE,CAAC;MACH;MACA,OAAO;QACLkD,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE0H;MACX,CAAC;IACH,CAAC;IACDG,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAO;QACd9H,OAAO,EAAE,CAAC;QACV;QACAC,OAAO,EAAEhE,KAAK,CAAC8L,UAAU,CAACzB,SAAS;MACrC,CAAC;IAAA,CAAC;IACF0B,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAO;QACdhI,OAAO,EAAE,CAAC;QACV;QACAC,OAAO,EAAEhE,KAAK,CAACgM,UAAU,CAAC3B,SAAS;MACrC,CAAC;IAAA,CAAC;IACF4B,QAAQ,EAAE,SAAAA,SAAA;MAAA,OAAO;QACflI,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACX,CAAC;IAAA;EACH,CAAC;AACH,CAAC;AACD,IAAIkI,wBAAwB,GAAG,KAAK;AACpC,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAInH,QAAQ,EAAEoH,SAAS,EAAK;EACvD,IAAI1J,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,CAACsJ,wBAAwB,EAAE;MAC7B,IAAMG,iBAAiB,GAAG,EAAE;MAC5B,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC7C,QAAQ,CAAC4C,SAAS,CAAC,EAAE;QAC7CC,iBAAiB,CAAC9K,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC;MAC3D;MACA,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAACiI,QAAQ,CAAC4C,SAAS,CAAC,EAAE;QAC7CC,iBAAiB,CAAC9K,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC;MACnE;MACA,IAAM+K,cAAc,GAAGtH,QAAQ,CAACgE,IAAI,CAAC,UAAA3F,OAAO;QAAA,OAAI,CAACgJ,iBAAiB,CAAC7C,QAAQ,CAACnG,OAAO,CAAC9C,IAAI,CAAC;MAAA,EAAC;MAC1F,IAAI+L,cAAc,EAAE;QAClBC,OAAO,CAACC,IAAI,wEAAAnM,MAAA,CAAuEiM,cAAc,CAAC/L,IAAI,2DAAAF,MAAA,CAAuDgM,iBAAiB,CAAC/L,IAAI,CAAC,MAAM,CAAC,WAAQ;QACnM4L,wBAAwB,GAAG,IAAI;MACjC;IACF;EACF;AACF,CAAC;AACD,IAAMO,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIzM,KAAK,EAAEqD,OAAO,EAAEqJ,kBAAkB,EAAEC,gBAAgB,EAAK;EACzF,QAAQtJ,OAAO,CAAC9C,IAAI;IAClB,KAAK,MAAM;MACT;QACE,OAAOP,KAAK,CAACoH,OAAO,CAACuF,gBAAgB,EAAE3M,KAAK,CAAC4M,OAAO,CAACF,kBAAkB,CAAC,CAAC;MAC3E;IACF,KAAK,OAAO;MACV;QACE,OAAO1M,KAAK,CAAC6M,QAAQ,CAACF,gBAAgB,EAAE3M,KAAK,CAAC8K,QAAQ,CAAC4B,kBAAkB,CAAC,CAAC;MAC7E;IACF,KAAK,SAAS;MACZ;QACE,IAAMI,mBAAmB,GAAGlM,gBAAgB,CAACZ,KAAK,EAAEqD,OAAO,CAACxC,MAAM,CAAC;QACnE,IAAMkM,wBAAwB,GAAG/M,KAAK,CAAC2B,cAAc,CAAC+K,kBAAkB,EAAErJ,OAAO,CAACxC,MAAM,CAAC;QACzF,IAAMmM,qBAAqB,GAAGF,mBAAmB,CAACvI,OAAO,CAACwI,wBAAwB,CAAC;QACnF,IAAME,0BAA0B,GAAGH,mBAAmB,CAACvI,OAAO,CAAClB,OAAO,CAACnB,KAAK,CAAC;QAC7E,IAAMgL,IAAI,GAAGD,0BAA0B,GAAGD,qBAAqB;QAC/D,OAAOhN,KAAK,CAACwB,OAAO,CAACkL,kBAAkB,EAAEQ,IAAI,CAAC;MAChD;IACF,KAAK,KAAK;MACR;QACE,OAAOlN,KAAK,CAAC6C,OAAO,CAAC8J,gBAAgB,EAAE3M,KAAK,CAACmN,OAAO,CAACT,kBAAkB,CAAC,CAAC;MAC3E;IACF,KAAK,UAAU;MACb;QACE,IAAMU,IAAI,GAAGpN,KAAK,CAAC2L,QAAQ,CAACe,kBAAkB,CAAC,GAAG,EAAE;QACpD,IAAMW,eAAe,GAAGrN,KAAK,CAAC2L,QAAQ,CAACgB,gBAAgB,CAAC;QACxD,IAAIS,IAAI,IAAIC,eAAe,IAAI,EAAE,EAAE;UACjC,OAAOrN,KAAK,CAACsN,QAAQ,CAACX,gBAAgB,EAAE,CAAC,EAAE,CAAC;QAC9C;QACA,IAAI,CAACS,IAAI,IAAIC,eAAe,GAAG,EAAE,EAAE;UACjC,OAAOrN,KAAK,CAACsN,QAAQ,CAACX,gBAAgB,EAAE,EAAE,CAAC;QAC7C;QACA,OAAOA,gBAAgB;MACzB;IACF,KAAK,OAAO;MACV;QACE,OAAO3M,KAAK,CAACuH,QAAQ,CAACoF,gBAAgB,EAAE3M,KAAK,CAAC2L,QAAQ,CAACe,kBAAkB,CAAC,CAAC;MAC7E;IACF,KAAK,SAAS;MACZ;QACE,OAAO1M,KAAK,CAACwH,UAAU,CAACmF,gBAAgB,EAAE3M,KAAK,CAAC8L,UAAU,CAACY,kBAAkB,CAAC,CAAC;MACjF;IACF,KAAK,SAAS;MACZ;QACE,OAAO1M,KAAK,CAACuN,UAAU,CAACZ,gBAAgB,EAAE3M,KAAK,CAACgM,UAAU,CAACU,kBAAkB,CAAC,CAAC;MACjF;IACF;MACE;QACE,OAAOC,gBAAgB;MACzB;EAAC;AAEP,CAAC;AACD,OAAO,IAAMa,0BAA0B,GAAG,SAA7BA,0BAA0BA,CAAIxN,KAAK,EAAE0M,kBAAkB,EAAE1H,QAAQ,EAAEyI,aAAa,EAAEC,2BAA2B;EAAA,OAAK1I,QAAQ,CAACuF,MAAM,CAAC,UAACoD,UAAU,EAAEtK,OAAO,EAAK;IACtK,IAAI,CAACqK,2BAA2B,IAAIrK,OAAO,CAACuF,QAAQ,EAAE;MACpD,OAAO6D,wBAAwB,CAACzM,KAAK,EAAEqD,OAAO,EAAEqJ,kBAAkB,EAAEiB,UAAU,CAAC;IACjF;IACA,OAAOA,UAAU;EACnB,CAAC,EAAEF,aAAa,CAAC;AAAA;AACjB,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAASA,CAAA;EAAA,OAASC,SAAS,CAACC,SAAS,CAACC,WAAW,EAAE,CAACxJ,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AAAA;AACxF,OAAO,IAAMyJ,eAAe,GAAG,SAAlBA,eAAeA,CAAIhO,KAAK,EAAEgF,QAAQ,EAAE1B,uBAAuB,EAAK;EAC3E;EACA,IAAM2K,uBAAuB,GAAGjJ,QAAQ,CAACvD,GAAG,CAAC,UAAA4B,OAAO,EAAI;IACtD,IAAIA,OAAO,CAAC9C,IAAI,KAAK,KAAK,EAAE;MAC1B,OAAO8C,OAAO;IAChB;IACA,IAAM6K,aAAa,GAAG5K,uBAAuB,CAACyH,GAAG,CAAC;MAChDlH,WAAW,EAAE,IAAI;MACjBhD,MAAM,EAAEwC,OAAO,CAACxC,MAAM;MACtBL,WAAW,EAAE6C,OAAO,CAAC7C;IACvB,CAAC,CAAC;IACF,OAAOV,QAAQ,CAAC,CAAC,CAAC,EAAEuD,OAAO,EAAE;MAC3BnB,KAAK,EAAED,sBAAsB,CAACjC,KAAK,EAAEkO,aAAa,CAACnK,OAAO,EAAEV,OAAO,CAAC9C,IAAI,EAAE8C,OAAO,CAACxC,MAAM,EAAEwC,OAAO,CAAClB,eAAe,EAAE+L,aAAa;IAClI,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,IAAM5G,YAAY,GAAGmC,uBAAuB,CAACzJ,KAAK,EAAEiO,uBAAuB,CAAC;;EAE5E;EACA,IAAI3G,YAAY,IAAI,IAAI,IAAI,CAACtH,KAAK,CAAC2I,OAAO,CAACrB,YAAY,CAAC,EAAE;IACxD,OAAO,IAAI;EACb;;EAEA;EACA,OAAOtC,QAAQ,CAACvD,GAAG,CAAC,UAAA4B,OAAO,EAAI;IAC7B,IAAIA,OAAO,CAAC9C,IAAI,KAAK,KAAK,EAAE;MAC1B,OAAO8C,OAAO;IAChB;IACA,IAAM6K,aAAa,GAAG5K,uBAAuB,CAACyH,GAAG,CAAC;MAChDlH,WAAW,EAAEyD,YAAY;MACzBzG,MAAM,EAAEwC,OAAO,CAACxC,MAAM;MACtBL,WAAW,EAAE6C,OAAO,CAAC7C;IACvB,CAAC,CAAC;IACF,IAAIgC,MAAM,CAACa,OAAO,CAACnB,KAAK,CAAC,IAAIgM,aAAa,CAAClK,OAAO,EAAE;MAClD,OAAOX,OAAO;IAChB;IACA,OAAOvD,QAAQ,CAAC,CAAC,CAAC,EAAEuD,OAAO,EAAE;MAC3BnB,KAAK,EAAEgM,aAAa,CAAClK,OAAO,CAAChB,QAAQ;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,IAAMmL,eAAe,GAAG,SAAlBA,eAAeA,CAAInJ,QAAQ,EAAEoJ,KAAK,EAAK;EAClD,IAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,IAAI,CAACD,KAAK,EAAE;IACVpJ,QAAQ,CAACsJ,OAAO,CAAC,UAACC,CAAC,EAAEpG,KAAK,EAAK;MAC7B,IAAMqG,SAAS,GAAGrG,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,KAAK,GAAG,CAAC;MAChD,IAAMsG,UAAU,GAAGtG,KAAK,KAAKnD,QAAQ,CAAC9B,MAAM,GAAG,CAAC,GAAG,IAAI,GAAGiF,KAAK,GAAG,CAAC;MACnEkG,SAAS,CAAClG,KAAK,CAAC,GAAG;QACjBqG,SAAS,EAATA,SAAS;QACTC,UAAU,EAAVA;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAO;MACLJ,SAAS,EAATA,SAAS;MACTK,UAAU,EAAE,CAAC;MACbC,QAAQ,EAAE3J,QAAQ,CAAC9B,MAAM,GAAG;IAC9B,CAAC;EACH;EACA,IAAM0L,OAAO,GAAG,CAAC,CAAC;EAClB,IAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,IAAIC,oBAAoB,GAAG,CAAC;EAC5B,IAAIC,kBAAkB,GAAG,CAAC;EAC1B,IAAIC,QAAQ,GAAGhK,QAAQ,CAAC9B,MAAM,GAAG,CAAC;EAClC,OAAO8L,QAAQ,IAAI,CAAC,EAAE;IACpBD,kBAAkB,GAAG/J,QAAQ,CAACiK,SAAS;IACvC;IACA,UAAC5L,OAAO,EAAE8E,KAAK,EAAK;MAClB,IAAI+G,qBAAqB;MACzB,OAAO/G,KAAK,IAAI2G,oBAAoB,KAAK,CAACI,qBAAqB,GAAG7L,OAAO,CAACmC,YAAY,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG0J,qBAAqB,CAAC1F,QAAQ,CAAC,GAAG,CAAC,CAAC;IACjJ,CAAC,CAAC;IACF,IAAIuF,kBAAkB,KAAK,CAAC,CAAC,EAAE;MAC7BA,kBAAkB,GAAG/J,QAAQ,CAAC9B,MAAM,GAAG,CAAC;IAC1C;IACA,KAAK,IAAIkC,CAAC,GAAG2J,kBAAkB,EAAE3J,CAAC,IAAI0J,oBAAoB,EAAE1J,CAAC,IAAI,CAAC,EAAE;MAClEyJ,OAAO,CAACzJ,CAAC,CAAC,GAAG4J,QAAQ;MACrBJ,OAAO,CAACI,QAAQ,CAAC,GAAG5J,CAAC;MACrB4J,QAAQ,IAAI,CAAC;IACf;IACAF,oBAAoB,GAAGC,kBAAkB,GAAG,CAAC;EAC/C;EACA/J,QAAQ,CAACsJ,OAAO,CAAC,UAACC,CAAC,EAAEpG,KAAK,EAAK;IAC7B,IAAMgH,QAAQ,GAAGN,OAAO,CAAC1G,KAAK,CAAC;IAC/B,IAAMqG,SAAS,GAAGW,QAAQ,KAAK,CAAC,GAAG,IAAI,GAAGP,OAAO,CAACO,QAAQ,GAAG,CAAC,CAAC;IAC/D,IAAMV,UAAU,GAAGU,QAAQ,KAAKnK,QAAQ,CAAC9B,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG0L,OAAO,CAACO,QAAQ,GAAG,CAAC,CAAC;IAClFd,SAAS,CAAClG,KAAK,CAAC,GAAG;MACjBqG,SAAS,EAATA,SAAS;MACTC,UAAU,EAAVA;IACF,CAAC;EACH,CAAC,CAAC;EACF,OAAO;IACLJ,SAAS,EAATA,SAAS;IACTK,UAAU,EAAEE,OAAO,CAAC,CAAC,CAAC;IACtBD,QAAQ,EAAEC,OAAO,CAAC5J,QAAQ,CAAC9B,MAAM,GAAG,CAAC;EACvC,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}