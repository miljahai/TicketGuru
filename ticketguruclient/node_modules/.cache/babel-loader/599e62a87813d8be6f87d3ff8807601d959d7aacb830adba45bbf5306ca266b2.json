{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\n\n// maps TimeView to its translation\nvar timeViews = {\n  hours: 'Stunden',\n  minutes: 'Minuten',\n  seconds: 'Sekunden'\n};\nvar deDEPickers = {\n  // Calendar navigation\n  previousMonth: 'Letzter Monat',\n  nextMonth: 'Nächster Monat',\n  // View navigation\n  openPreviousView: 'Letzte Ansicht öffnen',\n  openNextView: 'Nächste Ansicht öffnen',\n  calendarViewSwitchingButtonAriaLabel: function calendarViewSwitchingButtonAriaLabel(view) {\n    return view === 'year' ? 'Jahresansicht ist geöffnet, zur Kalenderansicht wechseln' : 'Kalenderansicht ist geöffnet, zur Jahresansicht wechseln';\n  },\n  // DateRange placeholders\n  start: 'Beginn',\n  end: 'Ende',\n  // Action bar\n  cancelButtonLabel: 'Abbrechen',\n  clearButtonLabel: 'Löschen',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Heute',\n  // Toolbar titles\n  datePickerToolbarTitle: 'Datum auswählen',\n  dateTimePickerToolbarTitle: 'Datum & Uhrzeit auswählen',\n  timePickerToolbarTitle: 'Uhrzeit auswählen',\n  dateRangePickerToolbarTitle: 'Datumsbereich auswählen',\n  // Clock labels\n  clockLabelText: function clockLabelText(view, time, adapter) {\n    var _timeViews$view;\n    return \"\".concat((_timeViews$view = timeViews[view]) != null ? _timeViews$view : view, \" ausw\\xE4hlen. \").concat(time === null ? 'Keine Uhrzeit ausgewählt' : \"Gew\\xE4hlte Uhrzeit ist \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: function hoursClockNumberText(hours) {\n    return \"\".concat(hours, \" \").concat(timeViews.hours);\n  },\n  minutesClockNumberText: function minutesClockNumberText(minutes) {\n    return \"\".concat(minutes, \" \").concat(timeViews.minutes);\n  },\n  secondsClockNumberText: function secondsClockNumberText(seconds) {\n    return \"\".concat(seconds, \"  \").concat(timeViews.seconds);\n  },\n  // Calendar labels\n  calendarWeekNumberHeaderLabel: 'Kalenderwoche',\n  calendarWeekNumberHeaderText: '#',\n  calendarWeekNumberAriaLabelText: function calendarWeekNumberAriaLabelText(weekNumber) {\n    return \"Woche \".concat(weekNumber);\n  },\n  calendarWeekNumberText: function calendarWeekNumberText(weekNumber) {\n    return \"\".concat(weekNumber);\n  },\n  // Open picker labels\n  openDatePickerDialogue: function openDatePickerDialogue(value, utils) {\n    return value !== null && utils.isValid(value) ? \"Datum ausw\\xE4hlen, gew\\xE4hltes Datum ist \".concat(utils.format(value, 'fullDate')) : 'Datum auswählen';\n  },\n  openTimePickerDialogue: function openTimePickerDialogue(value, utils) {\n    return value !== null && utils.isValid(value) ? \"Uhrzeit ausw\\xE4hlen, gew\\xE4hlte Uhrzeit ist \".concat(utils.format(value, 'fullTime')) : 'Uhrzeit auswählen';\n  },\n  // Table labels\n  timeTableLabel: 'Uhrzeit auswählen',\n  dateTableLabel: 'Datum auswählen',\n  // Field section placeholders\n  fieldYearPlaceholder: function fieldYearPlaceholder(params) {\n    return 'J'.repeat(params.digitAmount);\n  },\n  fieldMonthPlaceholder: function fieldMonthPlaceholder(params) {\n    return params.contentType === 'letter' ? 'MMMM' : 'MM';\n  },\n  fieldDayPlaceholder: function fieldDayPlaceholder() {\n    return 'TT';\n  },\n  // fieldWeekDayPlaceholder: params => params.contentType === 'letter' ? 'EEEE' : 'EE',\n  fieldHoursPlaceholder: function fieldHoursPlaceholder() {\n    return 'ss';\n  },\n  fieldMinutesPlaceholder: function fieldMinutesPlaceholder() {\n    return 'mm';\n  },\n  fieldSecondsPlaceholder: function fieldSecondsPlaceholder() {\n    return 'ss';\n  },\n  fieldMeridiemPlaceholder: function fieldMeridiemPlaceholder() {\n    return 'aa';\n  }\n};\nexport var deDE = getPickersLocalization(deDEPickers);","map":{"version":3,"names":["getPickersLocalization","timeViews","hours","minutes","seconds","deDEPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerToolbarTitle","dateTimePickerToolbarTitle","timePickerToolbarTitle","dateRangePickerToolbarTitle","clockLabelText","time","adapter","_timeViews$view","concat","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","calendarWeekNumberHeaderLabel","calendarWeekNumberHeaderText","calendarWeekNumberAriaLabelText","weekNumber","calendarWeekNumberText","openDatePickerDialogue","value","utils","isValid","openTimePickerDialogue","timeTableLabel","dateTableLabel","fieldYearPlaceholder","params","repeat","digitAmount","fieldMonthPlaceholder","contentType","fieldDayPlaceholder","fieldHoursPlaceholder","fieldMinutesPlaceholder","fieldSecondsPlaceholder","fieldMeridiemPlaceholder","deDE"],"sources":["C:/Users/sirvi/Documents/IT-tradenomikoulutus/OhjelmistoProjektiI/TicketGuru/ticketguruclient/node_modules/@mui/x-date-pickers/locales/deDE.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\n\n// maps TimeView to its translation\nconst timeViews = {\n  hours: 'Stunden',\n  minutes: 'Minuten',\n  seconds: 'Sekunden'\n};\nconst deDEPickers = {\n  // Calendar navigation\n  previousMonth: 'Letzter Monat',\n  nextMonth: 'Nächster Monat',\n  // View navigation\n  openPreviousView: 'Letzte Ansicht öffnen',\n  openNextView: 'Nächste Ansicht öffnen',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Jahresansicht ist geöffnet, zur Kalenderansicht wechseln' : 'Kalenderansicht ist geöffnet, zur Jahresansicht wechseln',\n  // DateRange placeholders\n  start: 'Beginn',\n  end: 'Ende',\n  // Action bar\n  cancelButtonLabel: 'Abbrechen',\n  clearButtonLabel: 'Löschen',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Heute',\n  // Toolbar titles\n  datePickerToolbarTitle: 'Datum auswählen',\n  dateTimePickerToolbarTitle: 'Datum & Uhrzeit auswählen',\n  timePickerToolbarTitle: 'Uhrzeit auswählen',\n  dateRangePickerToolbarTitle: 'Datumsbereich auswählen',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => {\n    var _timeViews$view;\n    return `${(_timeViews$view = timeViews[view]) != null ? _timeViews$view : view} auswählen. ${time === null ? 'Keine Uhrzeit ausgewählt' : `Gewählte Uhrzeit ist ${adapter.format(time, 'fullTime')}`}`;\n  },\n  hoursClockNumberText: hours => `${hours} ${timeViews.hours}`,\n  minutesClockNumberText: minutes => `${minutes} ${timeViews.minutes}`,\n  secondsClockNumberText: seconds => `${seconds}  ${timeViews.seconds}`,\n  // Calendar labels\n  calendarWeekNumberHeaderLabel: 'Kalenderwoche',\n  calendarWeekNumberHeaderText: '#',\n  calendarWeekNumberAriaLabelText: weekNumber => `Woche ${weekNumber}`,\n  calendarWeekNumberText: weekNumber => `${weekNumber}`,\n  // Open picker labels\n  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Datum auswählen, gewähltes Datum ist ${utils.format(value, 'fullDate')}` : 'Datum auswählen',\n  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Uhrzeit auswählen, gewählte Uhrzeit ist ${utils.format(value, 'fullTime')}` : 'Uhrzeit auswählen',\n  // Table labels\n  timeTableLabel: 'Uhrzeit auswählen',\n  dateTableLabel: 'Datum auswählen',\n  // Field section placeholders\n  fieldYearPlaceholder: params => 'J'.repeat(params.digitAmount),\n  fieldMonthPlaceholder: params => params.contentType === 'letter' ? 'MMMM' : 'MM',\n  fieldDayPlaceholder: () => 'TT',\n  // fieldWeekDayPlaceholder: params => params.contentType === 'letter' ? 'EEEE' : 'EE',\n  fieldHoursPlaceholder: () => 'ss',\n  fieldMinutesPlaceholder: () => 'mm',\n  fieldSecondsPlaceholder: () => 'ss',\n  fieldMeridiemPlaceholder: () => 'aa'\n};\nexport const deDE = getPickersLocalization(deDEPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC;;AAEvE;AACA,IAAMC,SAAS,GAAG;EAChBC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE;AACX,CAAC;AACD,IAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,eAAe;EAC9BC,SAAS,EAAE,gBAAgB;EAC3B;EACAC,gBAAgB,EAAE,uBAAuB;EACzCC,YAAY,EAAE,wBAAwB;EACtCC,oCAAoC,EAAE,SAAAA,qCAAAC,IAAI;IAAA,OAAIA,IAAI,KAAK,MAAM,GAAG,0DAA0D,GAAG,0DAA0D;EAAA;EACvL;EACAC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,MAAM;EACX;EACAC,iBAAiB,EAAE,WAAW;EAC9BC,gBAAgB,EAAE,SAAS;EAC3BC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,OAAO;EACzB;EACAC,sBAAsB,EAAE,iBAAiB;EACzCC,0BAA0B,EAAE,2BAA2B;EACvDC,sBAAsB,EAAE,mBAAmB;EAC3CC,2BAA2B,EAAE,yBAAyB;EACtD;EACAC,cAAc,EAAE,SAAAA,eAACX,IAAI,EAAEY,IAAI,EAAEC,OAAO,EAAK;IACvC,IAAIC,eAAe;IACnB,UAAAC,MAAA,CAAU,CAACD,eAAe,GAAGxB,SAAS,CAACU,IAAI,CAAC,KAAK,IAAI,GAAGc,eAAe,GAAGd,IAAI,qBAAAe,MAAA,CAAeH,IAAI,KAAK,IAAI,GAAG,0BAA0B,8BAAAG,MAAA,CAA2BF,OAAO,CAACG,MAAM,CAACJ,IAAI,EAAE,UAAU,CAAC,CAAE;EACtM,CAAC;EACDK,oBAAoB,EAAE,SAAAA,qBAAA1B,KAAK;IAAA,UAAAwB,MAAA,CAAOxB,KAAK,OAAAwB,MAAA,CAAIzB,SAAS,CAACC,KAAK;EAAA,CAAE;EAC5D2B,sBAAsB,EAAE,SAAAA,uBAAA1B,OAAO;IAAA,UAAAuB,MAAA,CAAOvB,OAAO,OAAAuB,MAAA,CAAIzB,SAAS,CAACE,OAAO;EAAA,CAAE;EACpE2B,sBAAsB,EAAE,SAAAA,uBAAA1B,OAAO;IAAA,UAAAsB,MAAA,CAAOtB,OAAO,QAAAsB,MAAA,CAAKzB,SAAS,CAACG,OAAO;EAAA,CAAE;EACrE;EACA2B,6BAA6B,EAAE,eAAe;EAC9CC,4BAA4B,EAAE,GAAG;EACjCC,+BAA+B,EAAE,SAAAA,gCAAAC,UAAU;IAAA,gBAAAR,MAAA,CAAaQ,UAAU;EAAA,CAAE;EACpEC,sBAAsB,EAAE,SAAAA,uBAAAD,UAAU;IAAA,UAAAR,MAAA,CAAOQ,UAAU;EAAA,CAAE;EACrD;EACAE,sBAAsB,EAAE,SAAAA,uBAACC,KAAK,EAAEC,KAAK;IAAA,OAAKD,KAAK,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,iDAAAX,MAAA,CAA2CY,KAAK,CAACX,MAAM,CAACU,KAAK,EAAE,UAAU,CAAC,IAAK,iBAAiB;EAAA;EAChLG,sBAAsB,EAAE,SAAAA,uBAACH,KAAK,EAAEC,KAAK;IAAA,OAAKD,KAAK,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,oDAAAX,MAAA,CAA8CY,KAAK,CAACX,MAAM,CAACU,KAAK,EAAE,UAAU,CAAC,IAAK,mBAAmB;EAAA;EACrL;EACAI,cAAc,EAAE,mBAAmB;EACnCC,cAAc,EAAE,iBAAiB;EACjC;EACAC,oBAAoB,EAAE,SAAAA,qBAAAC,MAAM;IAAA,OAAI,GAAG,CAACC,MAAM,CAACD,MAAM,CAACE,WAAW,CAAC;EAAA;EAC9DC,qBAAqB,EAAE,SAAAA,sBAAAH,MAAM;IAAA,OAAIA,MAAM,CAACI,WAAW,KAAK,QAAQ,GAAG,MAAM,GAAG,IAAI;EAAA;EAChFC,mBAAmB,EAAE,SAAAA,oBAAA;IAAA,OAAM,IAAI;EAAA;EAC/B;EACAC,qBAAqB,EAAE,SAAAA,sBAAA;IAAA,OAAM,IAAI;EAAA;EACjCC,uBAAuB,EAAE,SAAAA,wBAAA;IAAA,OAAM,IAAI;EAAA;EACnCC,uBAAuB,EAAE,SAAAA,wBAAA;IAAA,OAAM,IAAI;EAAA;EACnCC,wBAAwB,EAAE,SAAAA,yBAAA;IAAA,OAAM,IAAI;EAAA;AACtC,CAAC;AACD,OAAO,IAAMC,IAAI,GAAGtD,sBAAsB,CAACK,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}