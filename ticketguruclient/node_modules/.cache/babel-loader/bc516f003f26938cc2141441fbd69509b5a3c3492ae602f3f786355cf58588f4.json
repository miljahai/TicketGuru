{"ast":null,"code":"import _slicedToArray from \"C:/Users/sirvi/Documents/IT-tradenomikoulutus/OhjelmistoProjektiI/TicketGuru/ticketguruclient/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nexport var useOpenState = function useOpenState(_ref) {\n  var open = _ref.open,\n    onOpen = _ref.onOpen,\n    onClose = _ref.onClose;\n  var isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    openState = _React$useState2[0],\n    setIsOpenState = _React$useState2[1];\n\n  // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n  React.useEffect(function () {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  var setIsOpen = React.useCallback(function (newIsOpen) {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen: setIsOpen\n  };\n};","map":{"version":3,"names":["React","useOpenState","_ref","open","onOpen","onClose","isControllingOpenProp","useRef","current","_React$useState","useState","_React$useState2","_slicedToArray","openState","setIsOpenState","useEffect","Error","setIsOpen","useCallback","newIsOpen","isOpen"],"sources":["C:/Users/sirvi/Documents/IT-tradenomikoulutus/OhjelmistoProjektiI/TicketGuru/ticketguruclient/node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.js"],"sourcesContent":["import * as React from 'react';\nexport const useOpenState = ({\n  open,\n  onOpen,\n  onClose\n}) => {\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [openState, setIsOpenState] = React.useState(false);\n\n  // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  const setIsOpen = React.useCallback(newIsOpen => {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen\n  };\n};"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAInB;EAAA,IAHJC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IACJC,MAAM,GAAAF,IAAA,CAANE,MAAM;IACNC,OAAO,GAAAH,IAAA,CAAPG,OAAO;EAEP,IAAMC,qBAAqB,GAAGN,KAAK,CAACO,MAAM,CAAC,OAAOJ,IAAI,KAAK,SAAS,CAAC,CAACK,OAAO;EAC7E,IAAAC,eAAA,GAAoCT,KAAK,CAACU,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAlDI,SAAS,GAAAF,gBAAA;IAAEG,cAAc,GAAAH,gBAAA;;EAEhC;EACA;EACAX,KAAK,CAACe,SAAS,CAAC,YAAM;IACpB,IAAIT,qBAAqB,EAAE;MACzB,IAAI,OAAOH,IAAI,KAAK,SAAS,EAAE;QAC7B,MAAM,IAAIa,KAAK,CAAC,oEAAoE,CAAC;MACvF;MACAF,cAAc,CAACX,IAAI,CAAC;IACtB;EACF,CAAC,EAAE,CAACG,qBAAqB,EAAEH,IAAI,CAAC,CAAC;EACjC,IAAMc,SAAS,GAAGjB,KAAK,CAACkB,WAAW,CAAC,UAAAC,SAAS,EAAI;IAC/C,IAAI,CAACb,qBAAqB,EAAE;MAC1BQ,cAAc,CAACK,SAAS,CAAC;IAC3B;IACA,IAAIA,SAAS,IAAIf,MAAM,EAAE;MACvBA,MAAM,EAAE;IACV;IACA,IAAI,CAACe,SAAS,IAAId,OAAO,EAAE;MACzBA,OAAO,EAAE;IACX;EACF,CAAC,EAAE,CAACC,qBAAqB,EAAEF,MAAM,EAAEC,OAAO,CAAC,CAAC;EAC5C,OAAO;IACLe,MAAM,EAAEP,SAAS;IACjBI,SAAS,EAATA;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}