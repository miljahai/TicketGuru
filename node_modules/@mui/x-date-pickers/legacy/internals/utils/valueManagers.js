import { replaceInvalidDateByNull } from './date-utils';
import { addPositionPropertiesToSections, createDateStrForInputFromSections, splitFormatIntoSections, getSectionOrder as _getSectionOrder } from '../hooks/useField/useField.utils';
export var singleItemValueManager = {
  emptyValue: null,
  getTodayValue: function getTodayValue(utils) {
    return utils.date();
  },
  cleanValue: replaceInvalidDateByNull,
  areValuesEqual: function areValuesEqual(utils, a, b) {
    return utils.isEqual(a, b);
  },
  isSameError: function isSameError(a, b) {
    return a === b;
  },
  defaultErrorState: null
};
export var singleItemFieldValueManager = {
  updateReferenceValue: function updateReferenceValue(utils, value, prevReferenceValue) {
    return value == null || !utils.isValid(value) ? prevReferenceValue : value;
  },
  getSectionsFromValue: function getSectionsFromValue(utils, localeText, prevSections, date, format) {
    var shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;
    if (shouldReUsePrevDateSections) {
      return prevSections;
    }
    return addPositionPropertiesToSections(splitFormatIntoSections(utils, localeText, format, date));
  },
  getValueStrFromSections: function getValueStrFromSections(sections) {
    return createDateStrForInputFromSections(sections);
  },
  getActiveDateSections: function getActiveDateSections(sections) {
    return sections;
  },
  getActiveDateManager: function getActiveDateManager(utils, state) {
    return {
      activeDate: state.value,
      referenceActiveDate: state.referenceValue,
      getNewValueFromNewActiveDate: function getNewValueFromNewActiveDate(newActiveDate) {
        return {
          value: newActiveDate,
          referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate
        };
      }
    };
  },
  parseValueStr: function parseValueStr(valueStr, referenceValue, parseDate) {
    return parseDate(valueStr.trim(), referenceValue);
  },
  hasError: function hasError(error) {
    return error != null;
  },
  getSectionOrder: function getSectionOrder(utils, localeText, format, isRTL) {
    return _getSectionOrder(splitFormatIntoSections(utils, localeText, format, null), isRTL);
  }
};