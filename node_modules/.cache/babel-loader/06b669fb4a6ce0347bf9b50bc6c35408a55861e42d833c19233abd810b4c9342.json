{"ast":null,"code":"import _slicedToArray from\"C:/Users/sirvi/Documents/IT-tradenomikoulutus/OhjelmistoProjektiI/TicketGuru/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{Box,Button}from\"@mui/material\";import React,{useRef,useState,useEffect}from'react';import{AgGridReact}from'ag-grid-react';import'ag-grid-community/styles/ag-grid.css';import'ag-grid-community/styles/ag-theme-material.css';import axios from\"axios\";import{useUser}from'../util/UserProvider';import{Delete}from'@mui/icons-material';import jwt_decode from\"jwt-decode\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function TicketTypesGrid(props){var user=useUser();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),roles=_useState2[0],setRoles=_useState2[1];useEffect(function(){if(user&&user.jwt){var decodedJwt=jwt_decode(user.jwt);setRoles(decodedJwt.authorities);}},[user,user.jwt]);var editTickettype=function editTickettype(value){// Edit Tickettype\n// Editing eventrecord_name is not allowed. \n// Build link and body for value update call\nvar link='http://localhost:8080/tickettypes/'+value.data.ticket_type_id;var body=JSON.stringify(value.data);// Call PUT to server\nPromise.all([axios.put(link,body,{headers:{'Authorization':\"Bearer \".concat(user.jwt),'Content-Type':'application/json;charset=utf-8'}})]).then(function(response){console.log('TicketType changed: ',response[0].data);}).catch(function(error){console.log('Error updating TicketType: ',error);});};/*const refreshGrid = () => {\r\n        gridRef.current.api.refreshCells();\r\n    }*/var deleteTickettype=function deleteTickettype(){// Delete selected TicketType\nvar selected=gridRef.current.api.getSelectedNodes();var row=gridRef.current.api.getSelectedRows();if(selected.length>0){if(window.confirm(\"Vahvista lipputyyppin poisto?\")){// Make a delete call to backend and set tickettype matching row deleted in database \nPromise.all([axios.delete(\"http://localhost:8080/tickettypes/\"+selected[0].data.ticket_type_id,{headers:{'Authorization':\"Bearer \".concat(props.user.jwt)}})]).then(function(response){console.log(\"TicketType \".concat(selected[0].data.ticket_type_id,\" deleted: \")+response[0]);// Hide row from view and update client:\ngridRef.current.api.applyTransaction({remove:row});}).catch(function(error){console.log('Error deleting TicketType: ',error);});};}else{alert('Valitse rivi ennen poistamista');};};// Grid Configuration\nvar gridRef=useRef();var columns=[{headerName:'Tapahtuma',field:'eventRecord.eventrecord_name',sortable:true,filter:true,checkboxSelection:true,sort:'asc',resizable:true,minWidth:400},{headerName:'Lipputyyppi',field:'name',sortable:true,filter:true,editable:true,resizable:true,minWidth:300},{headerName:'Hinta',field:'price',sortable:true,editable:true,filter:'agNumberColumnFilter'}];var defaultColDef={cellStyle:function cellStyle(){return{display:'flex',alignItems:'left',justifyContent:'left'};}};return/*#__PURE__*/_jsxs(Box,{children:[roles&&roles.filter(function(role){return role===\"ADMIN\"||role===\"EVENTS\";}).length>0?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Button,{onClick:deleteTickettype,variant:\"contained\",color:\"error\",sx:{m:1},children:[/*#__PURE__*/_jsx(Delete,{}),\"Poista valittu\"]})}):/*#__PURE__*/_jsx(_Fragment,{}),/*#__PURE__*/_jsx(\"div\",{className:\"ag-theme-material\",style:{height:'50vmin',width:'60rem'},children:/*#__PURE__*/_jsx(AgGridReact,{ref:gridRef,onGridkey:function onGridkey(params){return gridRef.current=params.api;},rowSelection:\"single\",columnDefs:columns,rowData:props.tickettypes,animateRows:true,defaultColDef:defaultColDef,pagination:true,paginationAutoPageSize:true,enableCellChangeFlash:true,onCellValueChanged:function onCellValueChanged(event){return editTickettype(event);}})})]});}","map":{"version":3,"names":["Box","Button","React","useRef","useState","useEffect","AgGridReact","axios","useUser","Delete","jwt_decode","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TicketTypesGrid","props","user","_useState","_useState2","_slicedToArray","roles","setRoles","jwt","decodedJwt","authorities","editTickettype","value","link","data","ticket_type_id","body","JSON","stringify","Promise","all","put","headers","concat","then","response","console","log","catch","error","deleteTickettype","selected","gridRef","current","api","getSelectedNodes","row","getSelectedRows","length","window","confirm","delete","applyTransaction","remove","alert","columns","headerName","field","sortable","filter","checkboxSelection","sort","resizable","minWidth","editable","defaultColDef","cellStyle","display","alignItems","justifyContent","children","role","onClick","variant","color","sx","m","className","style","height","width","ref","onGridkey","params","rowSelection","columnDefs","rowData","tickettypes","animateRows","pagination","paginationAutoPageSize","enableCellChangeFlash","onCellValueChanged","event"],"sources":["C:/Users/sirvi/Documents/IT-tradenomikoulutus/OhjelmistoProjektiI/TicketGuru/src/components/TicketTypesGrid.js"],"sourcesContent":["import { Box, Button } from \"@mui/material\";\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-material.css';\r\nimport axios from \"axios\";\r\nimport { useUser } from '../util/UserProvider';\r\nimport { Delete } from '@mui/icons-material';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport default function TicketTypesGrid(props) {\r\n    const user = useUser();\r\n    const [roles, setRoles] = useState([]);\r\n    useEffect(() => {\r\n        if (user && user.jwt) {\r\n            const decodedJwt = jwt_decode(user.jwt);\r\n            setRoles(decodedJwt.authorities);\r\n        }\r\n    }, [user, user.jwt]);\r\n\r\n    const editTickettype = (value) => {\r\n        // Edit Tickettype\r\n        // Editing eventrecord_name is not allowed. \r\n        // Build link and body for value update call\r\n        const link = 'http://localhost:8080/tickettypes/' + value.data.ticket_type_id\r\n        const body = JSON.stringify(value.data)\r\n\r\n        // Call PUT to server\r\n        Promise.all([\r\n            axios.put(\r\n                link,\r\n                body,\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${user.jwt}`,\r\n                        'Content-Type': 'application/json;charset=utf-8'\r\n                    }\r\n                })\r\n        ]).then((response) => {\r\n            console.log('TicketType changed: ', response[0].data);\r\n        }).catch(error => {\r\n            console.log('Error updating TicketType: ', error)\r\n        });\r\n    }\r\n\r\n    /*const refreshGrid = () => {\r\n        gridRef.current.api.refreshCells();\r\n    }*/\r\n\r\n    const deleteTickettype = () => {\r\n        // Delete selected TicketType\r\n        const selected = gridRef.current.api.getSelectedNodes();\r\n        const row = gridRef.current.api.getSelectedRows();\r\n\r\n        if (selected.length > 0) {\r\n            if (window.confirm(\"Vahvista lipputyyppin poisto?\")) {\r\n                // Make a delete call to backend and set tickettype matching row deleted in database \r\n                Promise.all([\r\n                    axios.delete(`http://localhost:8080/tickettypes/` + selected[0].data.ticket_type_id, {\r\n                        headers: {\r\n                            'Authorization': `Bearer ${props.user.jwt}`\r\n                        }\r\n                    })\r\n                ]).then((response) => {\r\n                    console.log(`TicketType ${selected[0].data.ticket_type_id} deleted: ` + response[0]);\r\n                    // Hide row from view and update client:\r\n                    gridRef.current.api.applyTransaction({ remove: row });\r\n                }).catch(error => {\r\n                    console.log('Error deleting TicketType: ', error);\r\n                });\r\n            };\r\n        } else {\r\n            alert('Valitse rivi ennen poistamista');\r\n        };\r\n    };\r\n\r\n    // Grid Configuration\r\n    const gridRef = useRef();\r\n    const columns = [\r\n        { headerName: 'Tapahtuma', field: 'eventRecord.eventrecord_name', sortable: true, filter: true, checkboxSelection: true, sort: 'asc', resizable: true, minWidth: 400 },\r\n        { headerName: 'Lipputyyppi', field: 'name', sortable: true, filter: true, editable: true, resizable: true, minWidth: 300 },\r\n        {\r\n            headerName: 'Hinta',\r\n            field: 'price',\r\n            sortable: true,\r\n            editable: true,\r\n            filter: 'agNumberColumnFilter'\r\n        }\r\n    ];\r\n    const defaultColDef = {\r\n        cellStyle: () => ({ display: 'flex', alignItems: 'left', justifyContent: 'left' })\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            {roles && roles.filter((role) => role === \"ADMIN\" || role === \"EVENTS\").length > 0 ? (\r\n                <>\r\n                    <Button onClick={deleteTickettype} variant=\"contained\" color='error' sx={{ m: 1 }}><Delete />Poista valittu</Button>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            <div className='ag-theme-material' style={{ height: '50vmin', width: '60rem' }}>\r\n                <AgGridReact\r\n                    ref={gridRef}\r\n                    onGridkey={params => gridRef.current = params.api}\r\n                    rowSelection='single'\r\n                    columnDefs={columns}\r\n                    rowData={props.tickettypes}\r\n                    animateRows={true}\r\n                    defaultColDef={defaultColDef}\r\n                    pagination={true}\r\n                    paginationAutoPageSize={true}\r\n                    enableCellChangeFlash={true}\r\n                    onCellValueChanged={(event) => editTickettype(event)}\r\n                >\r\n                </AgGridReact>\r\n            </div>\r\n        </Box>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}